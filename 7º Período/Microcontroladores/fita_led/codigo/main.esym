D G "COLUN3" 9 9 "PIN_B0"
D G "__PCM__" 0 82 ""5.008""
D G "__DEVICE__" 0 82 "877"
D G "__DATE__" 0 82 ""02-jun-18""
D G "__TIME__" 0 82 ""20:46:14"" "Standard Header file for the PIC16F877A device ////////////////"
c L "set_tris_a" 1 5 13 "FUNCTION"
v L "value" 1 28 "int8" `54 
f B "set_tris_a" 1 28 "void(int8 value)" `53 
v L "value" 1 29 "int8" `56 
f B "set_tris_b" 1 29 "void(int8 value)" `55 
v L "value" 1 30 "int8" `58 
f B "set_tris_c" 1 30 "void(int8 value)" `57 
v L "value" 1 31 "int8" `60 
f B "set_tris_d" 1 31 "void(int8 value)" `59 
v L "value" 1 32 "int8" `62 
f B "set_tris_e" 1 32 "void(int8 value)" `61 
f B "get_tris_a" 1 33 "int8()" `63 
f B "get_tris_b" 1 34 "int8()" `64 
f B "get_tris_c" 1 35 "int8()" `65 
f B "get_tris_d" 1 36 "int8()" `66 
f B "get_tris_e" 1 37 "int8()" `67 
v L "value" 1 38 "int8" `69 
f B "output_a" 1 38 "void(int8 value)" `68 
v L "value" 1 39 "int8" `71 
f B "output_b" 1 39 "void(int8 value)" `70 
v L "value" 1 40 "int8" `73 
f B "output_c" 1 40 "void(int8 value)" `72 
v L "value" 1 41 "int8" `75 
f B "output_d" 1 41 "void(int8 value)" `74 
v L "value" 1 42 "int8" `77 
f B "output_e" 1 42 "void(int8 value)" `76 
f B "input_a" 1 43 "int8()" `78 
f B "input_b" 1 44 "int8()" `79 
f B "input_c" 1 45 "int8()" `80 
f B "input_d" 1 46 "int8()" `81 
f B "input_e" 1 47 "int8()" `82 
f B "input_change_a" 1 48 "int8()" `83 
f B "input_change_b" 1 49 "int8()" `84 
f B "input_change_c" 1 50 "int8()" `85 
f B "input_change_d" 1 51 "int8()" `86 
f B "input_change_e" 1 52 "int8()" `87 
v L "pin" 1 53 "int16" `89 
f B "input" 1 53 "int8(int16 pin)" `88 
v L "pin" 1 54 "int16" `91 
f B "input_state" 1 54 "int8(int16 pin)" `90 
v L "pin" 1 55 "int16" `93 
f B "output_low" 1 55 "void(int16 pin)" `92 
v L "pin" 1 56 "int16" `95 
f B "output_high" 1 56 "void(int16 pin)" `94 
v L "pin" 1 57 "int16" `97 
f B "output_toggle" 1 57 "void(int16 pin)" `96 
v L "pin" 1 58 "int16" `99 
v L "level" 1 58 "int8" `100 
f B "output_bit" 1 58 "void(int16 pin,int8 level)" `98 
v L "pin" 1 59 "int16" `102 
f B "output_float" 1 59 "void(int16 pin)" `101 
v L "pin" 1 60 "int16" `104 
f B "output_drive" 1 60 "void(int16 pin)" `103  "Constants used to identify pins in the above are:"
d G "PIN_A0" 1 64 "40"
d G "PIN_A1" 1 65 "41"
d G "PIN_A2" 1 66 "42"
d G "PIN_A3" 1 67 "43"
d G "PIN_A4" 1 68 "44"
d G "PIN_A5" 1 69 "45"
d G "PIN_B0" 1 71 "48"
d G "PIN_B1" 1 72 "49"
d G "PIN_B2" 1 73 "50"
d G "PIN_B3" 1 74 "51"
d G "PIN_B4" 1 75 "52"
d G "PIN_B5" 1 76 "53"
d G "PIN_B6" 1 77 "54"
d G "PIN_B7" 1 78 "55"
d G "PIN_C0" 1 80 "56"
d G "PIN_C1" 1 81 "57"
d G "PIN_C2" 1 82 "58"
d G "PIN_C3" 1 83 "59"
d G "PIN_C4" 1 84 "60"
d G "PIN_C5" 1 85 "61"
d G "PIN_C6" 1 86 "62"
d G "PIN_C7" 1 87 "63"
d G "PIN_D0" 1 89 "64"
d G "PIN_D1" 1 90 "65"
d G "PIN_D2" 1 91 "66"
d G "PIN_D3" 1 92 "67"
d G "PIN_D4" 1 93 "68"
d G "PIN_D5" 1 94 "69"
d G "PIN_D6" 1 95 "70"
d G "PIN_D7" 1 96 "71"
d G "PIN_E0" 1 98 "72"
d G "PIN_E1" 1 99 "73"
d G "PIN_E2" 1 100 "74"
d G "FALSE" 1 103 "0"
d G "TRUE" 1 104 "1"
d G "BYTE" 1 106 "int8"
d G "BOOLEAN" 1 107 "int1"
d G "getc" 1 109 "getch"
d G "fgetc" 1 110 "getch"
d G "getchar" 1 111 "getch"
d G "putc" 1 112 "putchar"
d G "fputc" 1 113 "putchar"
d G "fgets" 1 114 "gets"
d G "fputs" 1 115 "puts"
c L "output_drive" 1 5 3 "FUNCTION"
f B "restart_cause" 1 120 "int8()" `105 
f B "reset_cpu" 1 121 "void()" `106 
f B "sleep" 1 122 "void()" `107  "Constants returned from RESTART_CAUSE() are:"
d G "WDT_FROM_SLEEP" 1 124 "3"
d G "WDT_TIMEOUT" 1 125 "11"
d G "MCLR_FROM_SLEEP" 1 126 "19"
d G "MCLR_FROM_RUN" 1 127 "27"
d G "NORMAL_POWER_UP" 1 128 "25"
d G "BROWNOUT_RESTART" 1 129 "26"
c L "sleep" 1 5 5 "FUNCTION"
v L "mode" 1 136 "int8" `109 
f B "setup_timer_0" 1 136 "void(int8 mode)" `108 
v L "value" 1 137 "int8" `111 
f B "set_timer0" 1 137 "void(int8 value)" `110 
f B "get_timer0" 1 138 "int8()" `112 
v L "mode" 1 139 "int8" `114 
v L "prescaler" 1 139 "int8" `115 
f B "setup_counters" 1 139 "void(int8 mode,int8 prescaler)" `113 
v L "value" 1 140 "int8" `117 
f B "set_rtcc" 1 140 "void(int8 value)" `116 
f B "get_rtcc" 1 141 "int8()" `118  "Constants used for SETUP_TIMER_0() are:"
d G "T0_INTERNAL" 1 143 "0"
d G "T0_EXT_L_TO_H" 1 144 "32"
d G "T0_EXT_H_TO_L" 1 145 "48"
d G "T0_DIV_1" 1 147 "8"
d G "T0_DIV_2" 1 148 "0"
d G "T0_DIV_4" 1 149 "1"
d G "T0_DIV_8" 1 150 "2"
d G "T0_DIV_16" 1 151 "3"
d G "T0_DIV_32" 1 152 "4"
d G "T0_DIV_64" 1 153 "5"
d G "T0_DIV_128" 1 154 "6"
d G "T0_DIV_256" 1 155 "7"
d G "T0_8_BIT" 1 158 "0"
d G "RTCC_INTERNAL" 1 160 "0" "The following are provided for compatibility"
d G "RTCC_EXT_L_TO_H" 1 161 "32" "with older compiler versions"
d G "RTCC_EXT_H_TO_L" 1 162 "48"
d G "RTCC_DIV_1" 1 163 "8"
d G "RTCC_DIV_2" 1 164 "0"
d G "RTCC_DIV_4" 1 165 "1"
d G "RTCC_DIV_8" 1 166 "2"
d G "RTCC_DIV_16" 1 167 "3"
d G "RTCC_DIV_32" 1 168 "4"
d G "RTCC_DIV_64" 1 169 "5"
d G "RTCC_DIV_128" 1 170 "6"
d G "RTCC_DIV_256" 1 171 "7"
d G "RTCC_8_BIT" 1 172 "0"
c L "get_rtcc" 1 5 8 "FUNCTION"
v L "mode" 1 183 "int16" `120 
f B "setup_wdt" 1 183 "void(int16 mode)" `119 
f B "restart_wdt" 1 184 "void()" `121  "Constants used for SETUP_WDT() are:"
d G "WDT_18MS" 1 187 "8"
d G "WDT_36MS" 1 188 "9"
d G "WDT_72MS" 1 189 "10"
d G "WDT_144MS" 1 190 "11"
d G "WDT_288MS" 1 191 "12"
d G "WDT_576MS" 1 192 "13"
d G "WDT_1152MS" 1 193 "14"
d G "WDT_2304MS" 1 194 "15"
c L "restart_wdt" 1 5 3 "FUNCTION"
v L "mode" 1 200 "int16" `123 
f B "setup_timer_1" 1 200 "void(int16 mode)" `122 
f B "get_timer1" 1 201 "int16()" `124 
v L "value" 1 202 "int16" `126 
f B "set_timer1" 1 202 "void(int16 value)" `125  "Constants used for SETUP_TIMER_1() are:"
d G "T1_DISABLED" 1 205 "0"
d G "T1_INTERNAL" 1 206 "0x85"
d G "T1_EXTERNAL" 1 207 "0x87"
d G "T1_EXTERNAL_SYNC" 1 208 "0x83"
d G "T1_CLK_OUT" 1 210 "8"
d G "T1_DIV_BY_1" 1 212 "0"
d G "T1_DIV_BY_2" 1 213 "0x10"
d G "T1_DIV_BY_4" 1 214 "0x20"
d G "T1_DIV_BY_8" 1 215 "0x30"
c L "set_timer1" 1 5 3 "FUNCTION"
v L "mode" 1 220 "int8" `128 
v L "period" 1 220 "int8" `129 
v L "postscale" 1 220 "int8" `130 
f B "setup_timer_2" 1 220 "void(int8 mode,int8 period,int8 postscale)" `127 
f B "get_timer2" 1 221 "int8()" `131 
v L "value" 1 222 "int8" `133 
f B "set_timer2" 1 222 "void(int8 value)" `132  "Constants used for SETUP_TIMER_2() are:"
d G "T2_DISABLED" 1 224 "0"
d G "T2_DIV_BY_1" 1 225 "4"
d G "T2_DIV_BY_4" 1 226 "5"
d G "T2_DIV_BY_16" 1 227 "6"
c L "set_timer2" 1 5 4 "FUNCTION"
v L "mode" 1 233 "int32" `135 
f B "setup_ccp1" 1 233 "void(int32 mode)" `134 
v L "mode" 1 234 "int32" `137 
v L "pwm" 1 234 "int8" `138 
f G "setup_ccp1" 1 234 "void(int32 mode,int8 pwm)" `136 
v L "value" 1 235 "int16" `140 
f B "set_pwm1_duty" 1 235 "void(int16 value)" `139  "Constants used for SETUP_CCPx() are:"
d G "CCP_OFF" 1 237 "0"
d G "CCP_CAPTURE_FE" 1 238 "4"
d G "CCP_CAPTURE_RE" 1 239 "5"
d G "CCP_CAPTURE_DIV_4" 1 240 "6"
d G "CCP_CAPTURE_DIV_16" 1 241 "7"
d G "CCP_COMPARE_SET_ON_MATCH" 1 242 "8"
d G "CCP_COMPARE_CLR_ON_MATCH" 1 243 "9"
d G "CCP_COMPARE_INT" 1 244 "0xA"
d G "CCP_COMPARE_RESET_TIMER" 1 245 "0xB"
d G "CCP_PWM" 1 246 "0xC"
d G "CCP_PWM_PLUS_1" 1 247 "0x1c"
d G "CCP_PWM_PLUS_2" 1 248 "0x2c"
d G "CCP_PWM_PLUS_3" 1 249 "0x3c"
c L "set_pwm1_duty" 1 5 1 "FUNCTION"
v L "mode" 1 255 "int32" `145 
f B "setup_ccp2" 1 255 "void(int32 mode)" `144 
v L "mode" 1 256 "int32" `147 
v L "pwm" 1 256 "int8" `148 
f G "setup_ccp2" 1 256 "void(int32 mode,int8 pwm)" `146 
v L "value" 1 257 "int16" `150 
f B "set_pwm2_duty" 1 257 "void(int16 value)" `149 
c L "set_pwm2_duty" 1 5 5 "FUNCTION"
v L "mode" 1 266 "int8" `155 
f B "setup_psp" 1 266 "void(int8 mode)" `154 
f B "psp_output_full" 1 267 "int8()" `156 
f B "psp_input_full" 1 268 "int8()" `157 
f B "psp_overflow" 1 269 "int8()" `158  "Constants used in SETUP_PSP() are:"
d G "PSP_ENABLED" 1 271 "0x10"
d G "PSP_DISABLED" 1 272 "0"
c L "psp_overflow" 1 5 3 "FUNCTION"
v L "mode" 1 279 "int32" `161 
f B "setup_spi" 1 279 "void(int32 mode)" `160 
v L "value" 1 280 "int8" `163 
f B "spi_write" 1 280 "void(int8 value)" `162 
f B "spi_read" 1 281 "int8()" `164 
v L "value" 1 282 "int8" `166 
f G "spi_read" 1 282 "int8(int8 value)" `165 
f B "spi_data_in" 1 283 "int8()" `167  "Constants used in SETUP_SPI() are:"
d G "SPI_DISABLED" 1 285 "0x00"
d G "SPI_MASTER" 1 286 "0x20"
d G "SPI_SLAVE" 1 287 "0x24"
d G "SPI_SCK_IDLE_HIGH" 1 288 "0x10"
d G "SPI_SCK_IDLE_LOW" 1 289 "0x00"
d G "SPI_CLK_DIV_4" 1 290 "0x00"
d G "SPI_CLK_DIV_16" 1 291 "0x01"
d G "SPI_CLK_DIV_64" 1 292 "0x02"
d G "SPI_CLK_T2" 1 293 "0x03"
d G "SPI_SS_DISABLED" 1 294 "0x01"
d G "SPI_XMIT_L_TO_H" 1 296 "0x4000"
d G "SPI_XMIT_H_TO_L" 1 297 "0x0000"
d G "SPI_SAMPLE_AT_MIDDLE" 1 299 "0x0000"
d G "SPI_SAMPLE_AT_END" 1 300 "0x8000"
d G "SPI_L_TO_H" 1 303 "SPI_SCK_IDLE_LOW"
d G "SPI_H_TO_L" 1 304 "SPI_SCK_IDLE_HIGH"
c L "spi_data_in" 1 5 2 "FUNCTION"
v L "baud" 1 308 "int32" `169 
f B "setup_uart" 1 308 "void(int32 baud)" `168 
v L "baud" 1 309 "int32" `171 
v L "stream" 1 309 "int8" `172 
f G "setup_uart" 1 309 "void(int32 baud,int8 stream)" `170 
v L "baud" 1 310 "int32" `174 
v L "stream" 1 310 "int8" `175 
v L "clock" 1 310 "int32" `176 
f G "setup_uart" 1 310 "void(int32 baud,int8 stream,int32 clock)" `173 
v L "baud" 1 311 "int32" `178 
f B "set_uart_speed" 1 311 "void(int32 baud)" `177 
v L "baud" 1 312 "int32" `180 
v L "stream" 1 312 "int8" `181 
f G "set_uart_speed" 1 312 "void(int32 baud,int8 stream)" `179 
v L "baud" 1 313 "int32" `183 
v L "stream" 1 313 "int8" `184 
v L "clock" 1 313 "int32" `185 
f G "set_uart_speed" 1 313 "void(int32 baud,int8 stream,int32 clock)" `182  "Constants used in setup_uart() are:"
d G "UART_ADDRESS" 1 317 "2"
d G "UART_DATA" 1 318 "4"
c L "set_uart_speed" 1 5 3 "FUNCTION"
v L "mode" 1 322 "int32" `187 
f B "setup_comparator" 1 322 "void(int32 mode)" `186  "Constants used in setup_comparator() are:"
d G "A0_A3_A1_A3" 1 324 "0xfff04"
d G "A0_A3_A1_A2_OUT_ON_A4_A5" 1 325 "0xfcf03"
d G "A0_A3_A1_A3_OUT_ON_A4_A5" 1 326 "0xbcf05"
d G "NC_NC_NC_NC" 1 327 "0x0ff07"
d G "A0_A3_A1_A2" 1 328 "0xfff02"
d G "A0_A3_NC_NC_OUT_ON_A4" 1 329 "0x9ef01"
d G "A0_VR_A1_VR" 1 330 "0x3ff06"
d G "A3_VR_A2_VR" 1 331 "0xcff0e"
d G "CP1_INVERT" 1 332 "0x0000010"
d G "CP2_INVERT" 1 333 "0x0000020"
c L "setup_comparator" 1 5 2 "FUNCTION"
v L "mode" 1 340 "int8" `191 
f B "setup_vref" 1 340 "void(int8 mode)" `190  "Constants used in setup_vref() are:"
d G "VREF_LOW" 1 342 "0xa0"
d G "VREF_HIGH" 1 343 "0x80"
d G "VREF_A2" 1 345 "0x40"
c L "setup_vref" 1 5 4 "FUNCTION"
v L "mode" 1 353 "int32" `193 
f B "setup_adc" 1 353 "void(int32 mode)" `192 
f B "read_adc" 1 354 "int8()" `194 
v L "mode" 1 355 "int8" `196 
f G "read_adc" 1 355 "int8(int8 mode)" `195 
f G "read_adc" 1 356 "int16()" `197 
v L "mode" 1 357 "int8" `199 
f G "read_adc" 1 357 "int16(int8 mode)" `198 
f B "adc_done" 1 358 "int8()" `200  "Constants used for SETUP_ADC() are:"
d G "ADC_OFF" 1 360 "0" "ADC Off"
d G "ADC_CLOCK_DIV_2" 1 361 "0x10000"
d G "ADC_CLOCK_DIV_4" 1 362 "0x4000"
d G "ADC_CLOCK_DIV_8" 1 363 "0x0040"
d G "ADC_CLOCK_DIV_16" 1 364 "0x4040"
d G "ADC_CLOCK_DIV_32" 1 365 "0x0080"
d G "ADC_CLOCK_DIV_64" 1 366 "0x4080"
d G "ADC_CLOCK_INTERNAL" 1 367 "0x00c0" "Internal 2-6us"
c L "adc_done" 1 5 1 "FUNCTION"
v L "setting" 1 370 "int8" `202 
f B "setup_adc_ports" 1 370 "void(int8 setting)" `201 
v L "channel" 1 371 "int8" `204 
f B "set_adc_channel" 1 371 "void(int8 channel)" `203  "Constants used in SETUP_ADC_PORTS() are:"
d G "NO_ANALOGS" 1 373 "7" "None"
d G "ALL_ANALOG" 1 374 "0" "A0 A1 A2 A3 A5 E0 E1 E2"
d G "AN0_AN1_AN2_AN4_AN5_AN6_AN7_VSS_VREF" 1 375 "1" "A0 A1 A2 A5 E0 E1 E2 VRefh=A3"
d G "AN0_AN1_AN2_AN3_AN4" 1 376 "2" "A0 A1 A2 A3 A5"
d G "AN0_AN1_AN2_AN4_VSS_VREF" 1 377 "3" "A0 A1 A2 A4 VRefh=A3"
d G "AN0_AN1_AN3" 1 378 "4" "A0 A1 A3"
d G "AN0_AN1_VSS_VREF" 1 379 "5" "A0 A1 VRefh=A3"
d G "AN0_AN1_AN4_AN5_AN6_AN7_VREF_VREF" 1 380 "0x08" "A0 A1 A5 E0 E1 E2 VRefh=A3 VRefl=A2"
d G "AN0_AN1_AN2_AN3_AN4_AN5" 1 381 "0x09" "A0 A1 A2 A3 A5 E0"
d G "AN0_AN1_AN2_AN4_AN5_VSS_VREF" 1 382 "0x0A" "A0 A1 A2 A5 E0 VRefh=A3"
d G "AN0_AN1_AN4_AN5_VREF_VREF" 1 383 "0x0B" "A0 A1 A5 E0 VRefh=A3 VRefl=A2"
d G "AN0_AN1_AN4_VREF_VREF" 1 384 "0x0C" "A0 A1 A4 VRefh=A3 VRefl=A2"
d G "AN0_AN1_VREF_VREF" 1 385 "0x0D" "A0 A1 VRefh=A3 VRefl=A2"
d G "AN0" 1 386 "0x0E" "A0"
d G "AN0_VREF_VREF" 1 387 "0x0F" "A0 VRefh=A3 VRefl=A2"
d G "ANALOG_RA3_REF" 1 388 "0x1" "!old only provided for compatibility"
d G "A_ANALOG" 1 389 "0x2" "!old only provided for compatibility"
d G "A_ANALOG_RA3_REF" 1 390 "0x3" "!old only provided for compatibility"
d G "RA0_RA1_RA3_ANALOG" 1 391 "0x4" "!old only provided for compatibility"
d G "RA0_RA1_ANALOG_RA3_REF" 1 392 "0x5" "!old only provided for compatibility"
d G "ANALOG_RA3_RA2_REF" 1 393 "0x8" "!old only provided for compatibility"
d G "ANALOG_NOT_RE1_RE2" 1 394 "0x9" "!old only provided for compatibility"
d G "ANALOG_NOT_RE1_RE2_REF_RA3" 1 395 "0xA" "!old only provided for compatibility"
d G "ANALOG_NOT_RE1_RE2_REF_RA3_RA2" 1 396 "0xB" "!old only provided for compatibility"
d G "A_ANALOG_RA3_RA2_REF" 1 397 "0xC" "!old only provided for compatibility"
d G "RA0_RA1_ANALOG_RA3_RA2_REF" 1 398 "0xD" "!old only provided for compatibility"
d G "RA0_ANALOG" 1 399 "0xE" "!old only provided for compatibility"
d G "RA0_ANALOG_RA3_RA2_REF" 1 400 "0xF" "!old only provided for compatibility"
d G "ADC_START_AND_READ" 1 403 "7" "This is the default if nothing is specified"
d G "ADC_START_ONLY" 1 404 "1"
d G "ADC_READ_ONLY" 1 405 "6"
c L "set_adc_channel" 1 5 3 "FUNCTION"
v L "x" 1 411 "sint8" `206 
f B "abs" 1 411 "sint8(sint8 x)" `205 
v L "x" 1 412 "sint16" `208 
f G "abs" 1 412 "sint16(sint16 x)" `207 
v L "x" 1 413 "sint32" `210 
f G "abs" 1 413 "sint32(sint32 x)" `209 
v L "x" 1 414 "float" `212 
f G "abs" 1 414 "float(float x)" `211 
v L "??65535" 1 415 "int8" `214 
v L "??65535" 1 415 "int8" `215 
f B "_mul" 1 415 "int16(int8 ,int8 )" `213 
v L "??65535" 1 416 "sint8" `214 
v L "??65535" 1 416 "sint8" `218 
f G "_mul" 1 416 "sint16(sint8 ,sint8 )" `216 
v L "??65535" 1 417 "int16" `214 
v L "??65535" 1 417 "int16" `221 
f G "_mul" 1 417 "int32(int16 ,int16 )" `219 
v L "??65535" 1 418 "sint16" `214 
v L "??65535" 1 418 "sint16" `224 
f G "_mul" 1 418 "sint32(sint16 ,sint16 )" `222  "Memory Manipulation Prototypes:"
v L "bank" 1 421 "int8" `226 
v L "offset" 1 421 "int8" `227 
f B "read_bank" 1 421 "int8(int8 bank,int8 offset)" `225 
v L "bank" 1 422 "int8" `229 
v L "offset" 1 422 "int8" `230 
v L "value" 1 422 "int8" `231 
f B "write_bank" 1 422 "void(int8 bank,int8 offset,int8 value)" `228 
v L "dest" 1 423 "*int8" `233 
v L "src" 1 423 "*int8" `234 
f B "strcpy" 1 423 "void(*int8 dest,*int8 src)" `232 
v L "dest" 1 424 "*int8" `236 
v L "src" 1 424 "*int8" `237 
f B "strcopy" 1 424 "void(*int8 dest,*int8 src)" `235 
v L "destination" 1 425 "*int8" `239 
v L "value" 1 425 "int8" `240 
v L "num" 1 425 "int16" `241 
f B "memset" 1 425 "void(*int8 destination,int8 value,int16 num)" `238 
v L "destination" 1 426 "*int8" `243 
v L "source" 1 426 "*int8" `244 
v L "num" 1 426 "int16" `245 
f B "memcpy" 1 426 "void(*int8 destination,*int8 source,int16 num)" `242  "String Prototypes:"
v L "cvalue" 1 429 "int8" `247 
f B "toupper" 1 429 "int8(int8 cvalue)" `246 
v L "cvalue" 1 430 "int8" `249 
f B "tolower" 1 430 "int8(int8 cvalue)" `248 
v L "string" 1 431 "*int8" `251 
v L "cstring" 1 431 "*int8" `252 
f B "sprintf" 1 431 "void(*int8 string,*int8 cstring,*int8 _VA_LIST)" `250  "Data Manipulators Prototypes:"
v L "address" 1 434 "*int8" `255 
v L "bytes" 1 434 "int8" `256 
v L "value" 1 434 "int8" `257 
f B "shift_left" 1 434 "int8(*int8 address,int8 bytes,int8 value)" `254 
v L "address" 1 435 "*int8" `259 
v L "bytes" 1 435 "int8" `260 
v L "value" 1 435 "int8" `261 
f B "shift_right" 1 435 "int8(*int8 address,int8 bytes,int8 value)" `258 
v L "address" 1 436 "*int8" `263 
v L "bytes" 1 436 "int8" `264 
f B "rotate_left" 1 436 "void(*int8 address,int8 bytes)" `262 
v L "address" 1 437 "*int8" `266 
v L "bytes" 1 437 "int8" `267 
f B "rotate_right" 1 437 "void(*int8 address,int8 bytes)" `265 
v L "value" 1 438 "int8" `269 
f B "swap" 1 438 "void(int8 value)" `268 
v L "var" 1 439 "int16" `271 
v L "offset" 1 439 "int8" `272 
f B "make8" 1 439 "int8(int16 var,int8 offset)" `270 
v L "var" 1 440 "int32" `271 
v L "offset" 1 440 "int8" `275 
f G "make8" 1 440 "int8(int32 var,int8 offset)" `273 
v L "varhigh" 1 441 "int8" `277 
v L "varlow" 1 441 "int8" `278 
f B "make16" 1 441 "int16(int8 varhigh,int8 varlow)" `276 
v L "var1" 1 442 "int16" `280 
f B "make32" 1 442 "int32(int16 var1)" `279 
v L "var1" 1 443 "int16" `282 
v L "var2" 1 443 "int16" `283 
f G "make32" 1 443 "int32(int16 var1,int16 var2)" `281 
v L "var1" 1 444 "int16" `282 
v L "var2" 1 444 "int8" `286 
f G "make32" 1 444 "int32(int16 var1,int8 var2)" `284 
v L "var1" 1 445 "int16" `288 
v L "var2" 1 445 "int8" `289 
v L "var3" 1 445 "int8" `290 
f G "make32" 1 445 "int32(int16 var1,int8 var2,int8 var3)" `287 
v L "var1" 1 446 "int8" `292 
f G "make32" 1 446 "int32(int8 var1)" `291 
v L "var1" 1 447 "int8" `282 
v L "var2" 1 447 "int8" `295 
f G "make32" 1 447 "int32(int8 var1,int8 var2)" `293 
v L "var1" 1 448 "int8" `288 
v L "var2" 1 448 "int8" `289 
v L "var3" 1 448 "int8" `299 
f G "make32" 1 448 "int32(int8 var1,int8 var2,int8 var3)" `296 
v L "var1" 1 449 "int8" `301 
v L "var2" 1 449 "int8" `302 
v L "var3" 1 449 "int8" `303 
v L "var4" 1 449 "int8" `304 
f G "make32" 1 449 "int32(int8 var1,int8 var2,int8 var3,int8 var4)" `300 
v L "var1" 1 450 "int8" `282 
v L "var2" 1 450 "int16" `307 
f G "make32" 1 450 "int32(int8 var1,int16 var2)" `305 
v L "var1" 1 451 "int8" `288 
v L "var2" 1 451 "int16" `289 
v L "var3" 1 451 "int8" `311 
f G "make32" 1 451 "int32(int8 var1,int16 var2,int8 var3)" `308 
v L "var1" 1 452 "int8" `288 
v L "var2" 1 452 "int8" `289 
v L "var3" 1 452 "int16" `315 
f G "make32" 1 452 "int32(int8 var1,int8 var2,int16 var3)" `312 
v L "var" 1 453 "int8" `317 
v L "bit" 1 453 "int8" `318 
f B "bit_set" 1 453 "void(int8 var,int8 bit)" `316 
v L "var" 1 454 "int16" `317 
v L "bit" 1 454 "int8" `321 
f G "bit_set" 1 454 "void(int16 var,int8 bit)" `319 
v L "var" 1 455 "int32" `317 
v L "bit" 1 455 "int8" `324 
f G "bit_set" 1 455 "void(int32 var,int8 bit)" `322 
v L "var" 1 456 "int8" `326 
v L "bit" 1 456 "int8" `327 
f B "bit_clear" 1 456 "void(int8 var,int8 bit)" `325 
v L "var" 1 457 "int16" `326 
v L "bit" 1 457 "int8" `330 
f G "bit_clear" 1 457 "void(int16 var,int8 bit)" `328 
v L "var" 1 458 "int32" `326 
v L "bit" 1 458 "int8" `333 
f G "bit_clear" 1 458 "void(int32 var,int8 bit)" `331 
v L "var" 1 459 "int8" `335 
v L "bit" 1 459 "int8" `336 
f B "bit_test" 1 459 "int8(int8 var,int8 bit)" `334 
v L "var" 1 460 "int16" `335 
v L "bit" 1 460 "int8" `339 
f G "bit_test" 1 460 "int8(int16 var,int8 bit)" `337 
v L "var" 1 461 "int32" `335 
v L "bit" 1 461 "int8" `342 
f G "bit_test" 1 461 "int8(int32 var,int8 bit)" `340  "#use delay() Prototypes:"
v L "count" 1 464 "int8" `344 
f B "delay_cycles" 1 464 "void(int8 count)" `343 
v L "time" 1 465 "int16" `346 
f B "delay_ms" 1 465 "void(int16 time)" `345 
v L "time" 1 466 "int16" `348 
f B "delay_us" 1 466 "void(int16 time)" `347  "#use rs232() Prototypes:"
v L "cdata" 1 469 "int8" `350 
f B "putchar" 1 469 "void(int8 cdata)" `349 
v L "cdata" 1 470 "int8" `352 
v L "stream" 1 470 "int8" `353 
f G "putchar" 1 470 "void(int8 cdata,int8 stream)" `351 
v L "string" 1 471 "*int8" `355 
f B "puts" 1 471 "void(*int8 string)" `354 
v L "string" 1 472 "*int8" `357 
v L "stream" 1 472 "int8" `358 
f G "puts" 1 472 "void(*int8 string,int8 stream)" `356 
f B "getch" 1 473 "int8()" `359 
v L "stream" 1 474 "int8" `361 
f G "getch" 1 474 "int8(int8 stream)" `360 
v L "string" 1 475 "*int8" `363 
f B "gets" 1 475 "void(*int8 string)" `362 
v L "string" 1 476 "*int8" `365 
v L "stream" 1 476 "int8" `366 
f G "gets" 1 476 "void(*int8 string,int8 stream)" `364 
f B "kbhit" 1 477 "int8()" `367 
v L "stream" 1 478 "int8" `369 
f G "kbhit" 1 478 "int8(int8 stream)" `368 
v L "string" 1 479 "*int8" `371 
f B "printf" 1 479 "void(*int8 string,*int8 _VA_LIST)" `370 
v L "stream" 1 480 "int8" `374 
v L "string" 1 480 "*int8" `375 
f B "fprintf" 1 480 "void(int8 stream,*int8 string,*int8 _VA_LIST)" `373 
f B "putc_send" 1 481 "void()" `377 
v L "stream" 1 482 "int8" `379 
f B "fputc_send" 1 482 "void(int8 stream)" `378 
f B "rcv_buffer_full" 1 483 "int8()" `380 
v L "stream" 1 484 "int8" `382 
f G "rcv_buffer_full" 1 484 "int8(int8 stream)" `381 
f B "rcv_buffer_bytes" 1 485 "int16()" `383 
v L "stream" 1 486 "int8" `385 
f G "rcv_buffer_bytes" 1 486 "int16(int8 stream)" `384 
f B "tx_buffer_full" 1 487 "int8()" `386 
v L "stream" 1 488 "int8" `388 
f G "tx_buffer_full" 1 488 "int8(int8 stream)" `387 
f B "tx_buffer_bytes" 1 489 "int16()" `389 
v L "stream" 1 490 "int8" `391 
f G "tx_buffer_bytes" 1 490 "int16(int8 stream)" `390  "#use i2c() Prototypes:"
f B "i2c_read" 1 493 "int8()" `392 
v L "stream" 1 494 "int8" `394 
f G "i2c_read" 1 494 "int8(int8 stream)" `393 
v L "stream" 1 495 "int8" `396 
v L "ack" 1 495 "int8" `397 
f G "i2c_read" 1 495 "int8(int8 stream,int8 ack)" `395 
v L "data" 1 496 "int8" `399 
f B "i2c_write" 1 496 "int8(int8 data)" `398 
v L "stream" 1 497 "int8" `401 
v L "data" 1 497 "int8" `402 
f G "i2c_write" 1 497 "int8(int8 stream,int8 data)" `400 
f B "i2c_start" 1 498 "void()" `403 
v L "stream" 1 499 "int8" `405 
f G "i2c_start" 1 499 "void(int8 stream)" `404 
v L "stream" 1 500 "int8" `407 
v L "restart" 1 500 "int8" `408 
f G "i2c_start" 1 500 "void(int8 stream,int8 restart)" `406 
f B "i2c_stop" 1 501 "void()" `409 
v L "stream" 1 502 "int8" `411 
f G "i2c_stop" 1 502 "void(int8 stream)" `410 
f B "i2c_isr_state" 1 503 "int8()" `412 
v L "addr" 1 504 "int8" `414 
f B "i2c_slaveaddr" 1 504 "void(int8 addr)" `413 
v L "stream" 1 505 "int8" `416 
v L "addr" 1 505 "int8" `417 
f G "i2c_slaveaddr" 1 505 "void(int8 stream,int8 addr)" `415 
f B "i2c_poll" 1 506 "int8()" `418 
v L "stream" 1 507 "int8" `420 
f G "i2c_poll" 1 507 "int8(int8 stream)" `419 
v L "baud" 1 508 "int32" `422 
f B "i2c_init" 1 508 "void(int32 baud)" `421 
v L "stream" 1 509 "int8" `424 
v L "baud" 1 509 "int32" `425 
f G "i2c_init" 1 509 "void(int8 stream,int32 baud)" `423  "#use spi() Prototypes:"
f B "spi_xfer" 1 512 "int8()" `426 
f G "spi_xfer" 1 513 "int16()" `427 
f G "spi_xfer" 1 514 "int32()" `428 
v L "data" 1 515 "int8" `430 
f G "spi_xfer" 1 515 "int8(int8 data)" `429 
v L "data" 1 516 "int16" `432 
f G "spi_xfer" 1 516 "int16(int16 data)" `431 
v L "data" 1 517 "int32" `434 
f G "spi_xfer" 1 517 "int32(int32 data)" `433 
v L "stream" 1 518 "int8" `436 
v L "data" 1 518 "int8" `437 
f G "spi_xfer" 1 518 "int8(int8 stream,int8 data)" `435 
v L "stream" 1 519 "int8" `436 
v L "data" 1 519 "int16" `440 
f G "spi_xfer" 1 519 "int16(int8 stream,int16 data)" `438 
v L "stream" 1 520 "int8" `436 
v L "data" 1 520 "int32" `443 
f G "spi_xfer" 1 520 "int32(int8 stream,int32 data)" `441 
v L "stream" 1 521 "int8" `445 
v L "data" 1 521 "int8" `446 
v L "bits" 1 521 "int8" `447 
f G "spi_xfer" 1 521 "int8(int8 stream,int8 data,int8 bits)" `444 
v L "stream" 1 522 "int8" `445 
v L "data" 1 522 "int16" `446 
v L "bits" 1 522 "int8" `451 
f G "spi_xfer" 1 522 "int16(int8 stream,int16 data,int8 bits)" `448 
v L "stream" 1 523 "int8" `445 
v L "data" 1 523 "int32" `446 
v L "bits" 1 523 "int8" `455 
f G "spi_xfer" 1 523 "int32(int8 stream,int32 data,int8 bits)" `452 
v L "baud" 1 524 "int32" `457 
f B "spi_init" 1 524 "void(int32 baud)" `456 
v L "stream" 1 525 "int8" `459 
v L "baud" 1 525 "int32" `460 
f G "spi_init" 1 525 "void(int8 stream,int32 baud)" `458 
v L "baud" 1 526 "int32" `462 
f B "spi_speed" 1 526 "void(int32 baud)" `461 
v L "stream" 1 527 "int8" `464 
v L "baud" 1 527 "int32" `465 
f G "spi_speed" 1 527 "void(int8 stream,int32 baud)" `463 
v L "stream" 1 528 "int8" `467 
v L "baud" 1 528 "int32" `468 
v L "clock" 1 528 "int32" `469 
f G "spi_speed" 1 528 "void(int8 stream,int32 baud,int32 clock)" `466 
v L "data" 1 529 "int8" `471 
f B "spi_prewrite" 1 529 "void(int8 data)" `470 
v L "data" 1 530 "int16" `473 
f G "spi_prewrite" 1 530 "void(int16 data)" `472 
v L "data" 1 531 "int32" `475 
f G "spi_prewrite" 1 531 "void(int32 data)" `474 
v L "??65535" 1 532 "int8" `477 
v L "data" 1 532 "int8" `478 
f G "spi_prewrite" 1 532 "void(int8 ,int8 data)" `476 
v L "??65535" 1 533 "int8" `477 
v L "data" 1 533 "int16" `481 
f G "spi_prewrite" 1 533 "void(int8 ,int16 data)" `479 
v L "??65535" 1 534 "int8" `477 
v L "data" 1 534 "int32" `484 
f G "spi_prewrite" 1 534 "void(int8 ,int32 data)" `482 
f B "spi_xfer_in" 1 535 "int8()" `485 
f G "spi_xfer_in" 1 536 "int16()" `486 
f G "spi_xfer_in" 1 537 "int32()" `487 
v L "bits" 1 538 "int8" `489 
f G "spi_xfer_in" 1 538 "int8(int8 bits)" `488 
v L "bits" 1 539 "int8" `491 
f G "spi_xfer_in" 1 539 "int16(int8 bits)" `490 
v L "bits" 1 540 "int8" `493 
f G "spi_xfer_in" 1 540 "int32(int8 bits)" `492 
v L "stream" 1 541 "int8" `495 
v L "bits" 1 541 "int8" `496 
f G "spi_xfer_in" 1 541 "int8(int8 stream,int8 bits)" `494 
v L "stream" 1 542 "int8" `495 
v L "bits" 1 542 "int8" `499 
f G "spi_xfer_in" 1 542 "int16(int8 stream,int8 bits)" `497 
v L "stream" 1 543 "int8" `495 
v L "bits" 1 543 "int8" `502 
f G "spi_xfer_in" 1 543 "int32(int8 stream,int8 bits)" `500  "#use rtos() Prototypes:"
f B "rtos_run" 1 546 "void()" `503 
f B "rtos_yield" 1 547 "void()" `504 
v L "task" 1 548 "int8" `506 
f B "rtos_enable" 1 548 "void(int8 task)" `505 
v L "task" 1 549 "int8" `508 
f B "rtos_disable" 1 549 "void(int8 task)" `507 
f B "rtos_terminate" 1 550 "void()" `509 
v L "flag" 1 551 "int8" `511 
f B "rtos_await" 1 551 "void(int8 flag)" `510 
v L "sem" 1 552 "int8" `513 
f B "rtos_wait" 1 552 "void(int8 sem)" `512 
v L "sem" 1 553 "int8" `515 
f B "rtos_signal" 1 553 "void(int8 sem)" `514 
v L "task" 1 554 "int8" `517 
v L "msg" 1 554 "int8" `518 
f B "rtos_msg_send" 1 554 "void(int8 task,int8 msg)" `516 
f B "rtos_msg_read" 1 555 "int8()" `519 
f B "rtos_msg_poll" 1 556 "int8()" `520 
v L "task" 1 557 "int8" `522 
f B "rtos_overrun" 1 557 "int8(int8 task)" `521 
v L "task" 1 558 "int8" `524 
v L "stat" 1 558 "*int8" `525 
f B "rtos_stats" 1 558 "void(int8 task,*int8 stat)" `523  "#use timer() Prototypes:"
f B "get_ticks" 1 561 "int8()" `526 
f G "get_ticks" 1 562 "int16()" `527 
f G "get_ticks" 1 563 "int32()" `528 
v L "stream" 1 564 "int8" `530 
f G "get_ticks" 1 564 "int8(int8 stream)" `529 
v L "stream" 1 565 "int8" `532 
f G "get_ticks" 1 565 "int16(int8 stream)" `531 
v L "stream" 1 566 "int8" `534 
f G "get_ticks" 1 566 "int32(int8 stream)" `533 
v L "value" 1 567 "int8" `536 
f B "set_ticks" 1 567 "void(int8 value)" `535 
v L "value" 1 568 "int16" `538 
f G "set_ticks" 1 568 "void(int16 value)" `537 
v L "value" 1 569 "int32" `540 
f G "set_ticks" 1 569 "void(int32 value)" `539 
v L "stream" 1 570 "int8" `542 
v L "value" 1 570 "int8" `543 
f G "set_ticks" 1 570 "void(int8 stream,int8 value)" `541 
v L "stream" 1 571 "int8" `542 
v L "value" 1 571 "int16" `546 
f G "set_ticks" 1 571 "void(int8 stream,int16 value)" `544 
v L "stream" 1 572 "int8" `542 
v L "value" 1 572 "int32" `549 
f G "set_ticks" 1 572 "void(int8 stream,int32 value)" `547  "#use pwm() Prototypes:"
f B "pwm_on" 1 575 "void()" `550 
v L "stream" 1 576 "int8" `552 
f G "pwm_on" 1 576 "void(int8 stream)" `551 
f B "pwm_off" 1 577 "void()" `553 
v L "stream" 1 578 "int8" `555 
f G "pwm_off" 1 578 "void(int8 stream)" `554 
v L "duty" 1 579 "int16" `557 
f B "pwm_set_duty" 1 579 "void(int16 duty)" `556 
v L "stream" 1 580 "int8" `559 
v L "duty" 1 580 "int16" `560 
f G "pwm_set_duty" 1 580 "void(int8 stream,int16 duty)" `558 
v L "percent" 1 581 "int16" `562 
f B "pwm_set_duty_percent" 1 581 "void(int16 percent)" `561 
v L "stream" 1 582 "int8" `564 
v L "percent" 1 582 "int16" `565 
f G "pwm_set_duty_percent" 1 582 "void(int8 stream,int16 percent)" `563 
v L "frequency" 1 583 "int32" `567 
f B "pwm_set_frequency" 1 583 "void(int32 frequency)" `566 
v L "stream" 1 584 "int8" `569 
v L "frequency" 1 584 "int32" `570 
f G "pwm_set_frequency" 1 584 "void(int8 stream,int32 frequency)" `568  "#use capture() Prototypes:"
f B "get_capture_time" 1 587 "int16()" `571 
v L "stream" 1 588 "int8" `573 
f G "get_capture_time" 1 588 "int16(int8 stream)" `572 
f B "get_capture_event" 1 589 "int8()" `574 
v L "stream" 1 590 "int8" `576 
f G "get_capture_event" 1 590 "int8(int8 stream)" `575  "Enviroment Prototypes:"
c L "get_capture_event" 1 5 2 "FUNCTION"
v L "address" 1 603 "int16" `578 
f B "goto_address" 1 603 "void(int16 address)" `577 
v L "label" 1 604 "int16" `580 
f B "label_address" 1 604 "int16(int16 label)" `579  "Program Memory Prototypes:"
v L "address" 1 607 "int16" `582 
v L "dataptr" 1 607 "*int8" `583 
v L "count" 1 607 "int16" `584 
f B "read_program_memory" 1 607 "void(int16 address,*int8 dataptr,int16 count)" `581 
v L "address" 1 608 "int16" `586 
f B "read_program_eeprom" 1 608 "int16(int16 address)" `585 
v L "address" 1 609 "int16" `588 
f B "erase_program_eeprom" 1 609 "void(int16 address)" `587 
v L "address" 1 610 "int16" `590 
v L "dataptr" 1 610 "*int8" `591 
v L "count" 1 610 "int16" `592 
f B "write_program_memory" 1 610 "void(int16 address,*int8 dataptr,int16 count)" `589 
v L "address" 1 611 "int16" `594 
v L "data" 1 611 "int16" `595 
f B "write_program_eeprom" 1 611 "void(int16 address,int16 data)" `593  "EEPROM Prototypes:"
t G "__EEADDRESS__" 1 616 "int16" `596 
v L "address" 1 621 "__EEADDRESS__" `598 
f B "read_eeprom" 1 621 "int8(__EEADDRESS__ address)" `597 
v L "address" 1 622 "__EEADDRESS__" `600 
v L "value" 1 622 "int8" `601 
f B "write_eeprom" 1 622 "void(__EEADDRESS__ address,int8 value)" `599  "INT"
c L "write_eeprom" 1 5 4 "FUNCTION"
v L "interrupt" 1 629 "int32" `603 
f B "enable_interrupts" 1 629 "void(int32 interrupt)" `602 
v L "interrupt" 1 630 "int32" `605 
f B "disable_interrupts" 1 630 "void(int32 interrupt)" `604 
v L "interrupt" 1 631 "int32" `607 
f B "clear_interrupt" 1 631 "void(int32 interrupt)" `606 
v L "interrupt" 1 632 "int32" `609 
f B "interrupt_active" 1 632 "int8(int32 interrupt)" `608 
v L "source" 1 633 "int8" `611 
v L "edge" 1 633 "int8" `612 
f B "ext_int_edge" 1 633 "void(int8 source,int8 edge)" `610 
v L "address" 1 634 "int16" `614 
f B "jump_to_irs" 1 634 "void(int16 address)" `613  "Constants used in EXT_INT_EDGE() are:"
d G "L_TO_H" 1 636 "0x40"
d G "H_TO_L" 1 637 "0"
d G "GLOBAL" 1 639 "0x0BC0"
d G "PERIPH" 1 640 "0x0B40"
d G "INT_RTCC" 1 641 "0x000B20"
d G "INT_RB" 1 642 "0x00FF0B08"
d G "INT_EXT_L2H" 1 643 "0x50000B10"
d G "INT_EXT_H2L" 1 644 "0x60000B10"
d G "INT_EXT" 1 645 "0x000B10"
d G "INT_AD" 1 646 "0x008C40"
d G "INT_TBE" 1 647 "0x008C10"
d G "INT_RDA" 1 648 "0x008C20"
d G "INT_TIMER1" 1 649 "0x008C01"
d G "INT_TIMER2" 1 650 "0x008C02"
d G "INT_CCP1" 1 651 "0x008C04"
d G "INT_CCP2" 1 652 "0x008D01"
d G "INT_SSP" 1 653 "0x008C08"
d G "INT_PSP" 1 654 "0x008C80"
d G "INT_BUSCOL" 1 655 "0x008D08"
d G "INT_EEPROM" 1 656 "0x008D10"
d G "INT_TIMER0" 1 657 "0x000B20"
d G "INT_COMP" 1 658 "0x008D40"
D G "_STDINT" 2 19 ""
C L "jump_to_irs" 2 2 1 "FUNCTION"
T G "int8_t" 2 23 "sint8" `615 
T G "uint8_t" 2 24 "int8" `616 
T G "int16_t" 2 25 "sint16" `617 
T G "uint16_t" 2 26 "int16" `618 
T G "int32_t" 2 27 "sint32" `619 
T G "uint32_t" 2 28 "int32" `620 
D G "INT8_MAX" 2 37 " (128)"
D G "INT8_MIN" 2 38 " (-127)"
D G "UINT8_MAX" 2 39 " (255)"
D G "INT16_MAX" 2 41 " (32767)"
D G "INT16_MIN" 2 42 " (-32768)"
D G "UINT16_MAX" 2 43 " (65535)"
D G "INT32_MAX" 2 45 " (2147483647)"
D G "INT32_MIN" 2 46 " (-2147483648)"
D G "UINT32_MAX" 2 47 " (4294967295)"
C L "jump_to_irs" 2 2 1 "FUNCTION"
T G "int_least8_t" 2 61 "sint8" `621 
T G "uint_least8_t" 2 62 "int8" `622 
T G "int_least16_t" 2 63 "sint16" `623 
T G "uint_least16_t" 2 64 "int16" `624 
T G "int_least32_t" 2 65 "sint32" `625 
T G "uint_least32_t" 2 66 "int32" `626 
D G "INT_LEAST8_MAX" 2 75 " (128)"
D G "INT_LEAST8_MIN" 2 76 " (-127)"
D G "UINT_LEAST8_MAX" 2 77 " (255)"
D G "INT_LEAST16_MAX" 2 79 " (32767)"
D G "INT_LEAST16_MIN" 2 80 " (-32768)"
D G "UINT_LEAST16_MAX" 2 81 " (65535)"
D G "INT_LEAST32_MAX" 2 83 " (2147483647)"
D G "INT_LEAST32_MIN" 2 84 " (-2147483648)"
D G "UINT_LEAST32_MAX" 2 85 " (4294967295)"
C L "jump_to_irs" 2 2 1 "FUNCTION"
T G "int_fast8_t" 2 112 "sint8" `627 
T G "uint_fast8_t" 2 113 "int8" `628 
D G "INT_FAST8_MAX" 2 114 " (128)"
D G "INT_FAST8_MIN" 2 115 " (-127)"
D G "UINT_FAST8_MAX" 2 116 " (255)"
T G "int_fast16_t" 2 117 "sint16" `629 
T G "uint_fast16_t" 2 118 "int16" `630 
T G "int_fast32_t" 2 121 "sint32" `631 
T G "uint_fast32_t" 2 122 "int32" `632 
D G "INT_FAST16_MAX" 2 124 " (32767)"
D G "INT_FAST16_MIN" 2 125 " (-32768)"
D G "UINT_FAST16_MAX" 2 126 " (65535)"
D G "INT_FAST32_MAX" 2 128 " (2147483647)"
D G "INT_FAST32_MIN" 2 129 " (-2147483648)"
D G "UINT_FAST32_MAX" 2 130 " (4294967295)"
C L "jump_to_irs" 2 2 9 "FUNCTION"
D G "_STRING" 3 12 ""
D G "_STDDEF" 4 13 ""
D G "ptrdiff_t" 4 18 "unsigned int16"
D G "size_t" 4 24 "unsigned int16"
D G "wchar_t" 4 26 "char"
D G "NULL" 4 27 "0"
D G "offsetof" 4 29 "(s,f) (offsetofbit(s,f)/8)"
D G "_CTYPE" 5 12 ""
D G "islower" 5 14 "(x)  isamong(x,"abcdefghijklmnopqrstuvwxyz")"
D G "isupper" 5 15 "(x)  isamong(x,"ABCDEFGHIJKLMNOPQRSTUVWXYZ")"
D G "isalnum" 5 16 "(x)  isamong(x,"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz")"
D G "isalpha" 5 17 "(x)  isamong(x,"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz")"
D G "isdigit" 5 18 "(x)  isamong(x,"0123456789")"
D G "isspace" 5 19 "(x)  ((x)==' ')"
D G "isxdigit" 5 20 "(x) isamong(x,"0123456789ABCDEFabcdef")"
D G "iscntrl" 5 21 "(x)  ((x)<' ')"
D G "isprint" 5 22 "(x)  ((x)>=' ')"
D G "isgraph" 5 23 "(x)  ((x)>' ')"
D G "ispunct" 5 24 "(x)  (((x)>' ')&&!isalnum(x))"
C L "jump_to_irs" 3 19 10 "FUNCTION"
V L "s1" 3 34 "*int8" `634 
V L "s2" 3 34 "*int8" `635 
V L "n" 3 34 "int16" `636 
F G "memmove" 3 35 "*int8(*int8 s1,*int8 s2,int16 n)" `633 
V L "sc1" 3 36 "*int8" `637 
V L "sc2" 3 37 "*int8" `638 
D G "strcopy" 3 54 "strcpy"
C L "strncpy" 3 19 4 "FUNCTION"
V L "s1" 3 61 "*int8" `640 
V L "s2" 3 61 "*int8" `641 
V L "n" 3 61 "int16" `642 
F G "strncpy" 3 62 "*int8(*int8 s1,*int8 s2,int16 n)" `639 
V L "s" 3 63 "*int8" `643 
C L "strcat" 3 19 3 "FUNCTION"
V L "s1" 3 78 "*int8" `645 
V L "s2" 3 78 "*int8" `646 
F G "strcat" 3 79 "*int8(*int8 s1,*int8 s2)" `644 
V L "s" 3 80 "*int8" `647 
C L "strncat" 3 19 2 "FUNCTION"
V L "s1" 3 96 "*int8" `649 
V L "s2" 3 96 "*int8" `650 
V L "n" 3 96 "int16" `651 
F G "strncat" 3 97 "*int8(*int8 s1,*int8 s2,int16 n)" `648 
V L "s" 3 98 "*int8" `652 
C L "memcmp" 3 19 3 "FUNCTION"
V L "s1" 3 120 "*int8" `654 
V L "s2" 3 120 "*int8" `655 
V L "n" 3 120 "int16" `656 
F G "memcmp" 3 121 "sint8(*int8 s1,*int8 s2,int16 n)" `653 
V L "su1" 3 122 "*int8" `657 
V L "su2" 3 122 "*int8" `658 
C L "strcmp" 3 19 2 "FUNCTION"
V L "s1" 3 134 "*int8" `660 
V L "s2" 3 134 "*int8" `661 
F G "strcmp" 3 135 "sint8(*int8 s1,*int8 s2)" `659 
C L "strcoll" 3 19 2 "FUNCTION"
V L "s1" 3 144 "*int8" `663 
V L "s2" 3 144 "*int8" `664 
F G "strcoll" 3 145 "sint8(*int8 s1,*int8 s2)" `662 
C L "strncmp" 3 19 4 "FUNCTION"
V L "s1" 3 157 "*int8" `666 
V L "s2" 3 157 "*int8" `667 
V L "n" 3 157 "int16" `668 
F G "strncmp" 3 158 "sint8(*int8 s1,*int8 s2,int16 n)" `665 
C L "strxfrm" 3 19 3 "FUNCTION"
V L "s1" 3 169 "*int8" `670 
V L "s2" 3 169 "*int8" `671 
V L "n" 3 169 "int16" `672 
F G "strxfrm" 3 170 "int16(*int8 s1,*int8 s2,int16 n)" `669 
V L "s" 3 171 "*int8" `673 
V L "n1" 3 172 "int8" `674 
C L "memchr" 3 19 3 "FUNCTION"
V L "s" 3 191 "*int8" `676 
V L "c" 3 191 "int8" `677 
V L "n" 3 191 "int16" `678 
F G "memchr" 3 192 "*int8(*int8 s,int8 c,int16 n)" `675 
V L "uc" 3 193 "int8" `679 
V L "su" 3 194 "*int8" `680 
C L "strchr" 3 19 2 "FUNCTION"
V L "s" 3 205 "*int8" `682 
V L "c" 3 205 "int8" `683 
F G "strchr" 3 206 "*int8(*int8 s,int8 c)" `681 
C L "strcspn" 3 19 4 "FUNCTION"
V L "s1" 3 217 "*int8" `685 
V L "s2" 3 217 "*int8" `686 
F G "strcspn" 3 218 "int8(*int8 s1,*int8 s2)" `684 
V L "sc1" 3 219 "*int8" `687 
V L "sc2" 3 219 "*int8" `688 
C L "strpbrk" 3 19 4 "FUNCTION"
V L "s1" 3 232 "*int8" `690 
V L "s2" 3 232 "*int8" `691 
F G "strpbrk" 3 233 "*int8(*int8 s1,*int8 s2)" `689 
V L "sc1" 3 234 "*int8" `692 
V L "sc2" 3 234 "*int8" `693 
C L "strrchr" 3 19 2 "FUNCTION"
V L "s" 3 247 "*int8" `695 
V L "c" 3 247 "int8" `696 
F G "strrchr" 3 248 "*int8(*int8 s,int8 c)" `694 
V L "p" 3 249 "*int8" `697 
C L "strspn" 3 19 2 "FUNCTION"
V L "s1" 3 262 "*int8" `699 
V L "s2" 3 262 "*int8" `700 
F G "strspn" 3 263 "int8(*int8 s1,*int8 s2)" `698 
V L "sc1" 3 264 "*int8" `701 
V L "sc2" 3 264 "*int8" `702 
C L "strstr" 3 19 6 "FUNCTION"
V L "s1" 3 281 "*int8" `704 
V L "s2" 3 281 "*int8" `705 
F G "strstr" 3 282 "*int8(*int8 s1,*int8 s2)" `703 
V L "s" 3 283 "*int8" `706 
V L "t" 3 283 "*int8" `707 
C L "strtok" 3 19 13 "FUNCTION"
V L "s1" 3 320 "*int8" `709 
V L "s2" 3 320 "*int8" `710 
F G "strtok" 3 321 "*int8(*int8 s1,*int8 s2)" `708 
V L "beg" 3 322 "*int8" `711 
V L "end" 3 322 "*int8" `712 
V L "save" 3 323 "*int8" `713 
C L "strlen" 3 19 6 "FUNCTION"
V L "s" 3 369 "*int8" `715 
F G "strlen" 3 370 "int8(*int8 s)" `714 
V L "sc" 3 371 "*int8" `716 
C L "stricmp" 3 19 2 "FUNCTION"
V L "s1" 3 380 "*int8" `718 
V L "s2" 3 380 "*int8" `719 
F G "stricmp" 3 381 "sint8(*int8 s1,*int8 s2)" `717 
C L "strlwr" 3 19 3 "FUNCTION"
V L "s" 3 394 "*int8" `723 
F G "strlwr" 3 395 "*int8(*int8 s)" `722 
V L "p" 3 396 "*int8" `724 
C L "strupr" 3 19 3 "FUNCTION"
V L "s" 3 408 "*int8" `726 
F G "strupr" 3 409 "*int8(*int8 s)" `725 
V L "p" 3 410 "*int8" `727 
D G "_STDIO" 6 12 ""
D G "_STDLIB" 7 12 ""
D G "RAND_MAX" 7 19 "32767" "The value of which is the maximum value"
D G "LONG_POINTERS" 7 25 "1"
T G "div_t" 7 33 "{sint8 quot,sint8 rem}" `731 
T G "ldiv_t" 7 38 "{sint16 quot,sint16 rem}" `735  "(C) Copyright 1996,2003 Custom Computer Services           ////"
C L "atoi" 4 3 6 "FUNCTION"
C L "atoi" 7 43 2 "FUNCTION"
C L "atoi" 7 46 1 "*"
C L "atoi" 7 46 1 "*"
V L "s" 7 50 "*int8" `737 
F G "atoi" 7 50 "sint8(*int8 s)" `736  "Syntax: signed int32  atoi32(char * s)"
V L "s" 7 58 "*int8" `739 
F G "atoi32" 7 58 "sint32(*int8 s)" `738  "Syntax: char *  itoa(signed int32 num, int8 base, char * s)"
C L "atoi32" 7 46 2 "FUNCTION"
V L "num" 7 79 "sint32" `741 
V L "base" 7 79 "int8" `742 
V L "s" 7 79 "*int8" `743 
F G "itoa" 7 79 "*int8(sint32 num,int8 base,*int8 s)" `740  "Standard template: signed int16  atol(char * s)"
C L "itoa" 7 81 1 "*"
C L "itoa" 7 81 1 "*"
V L "s" 7 85 "*int8" `745 
F G "atol" 7 85 "sint16(*int8 s)" `744  "Standard template: int16 strtoul(char * s,char *endptr,signed int base)"
C L "atol" 7 87 1 "*"
C L "atol" 7 87 1 "*"
C L "atol" 7 87 1 "*"
C L "atol" 7 87 1 "*"
V L "s" 7 93 "*int8" `747 
V L "endptr" 7 93 "*int8" `748 
V L "base" 7 93 "sint8" `749 
F G "strtol" 7 93 "sint16(*int8 s,*int8 endptr,sint8 base)" `746  "Standard template: int16 strtoul(char * s,char *endptr,signed int base)"
C L "strtol" 7 95 1 "*"
C L "strtol" 7 95 1 "*"
C L "strtol" 7 95 1 "*"
C L "strtol" 7 95 1 "*"
V L "s" 7 101 "*int8" `751 
V L "endptr" 7 101 "*int8" `752 
V L "base" 7 101 "sint8" `753 
F G "strtoul" 7 101 "int16(*int8 s,*int8 endptr,sint8 base)" `750  "Standart template: float strtof(char * s,char *endptr)"
C L "strtoul" 7 95 2 "FUNCTION"
C L "strtoul" 7 103 1 "*"
C L "strtoul" 7 103 1 "*"
C L "strtoul" 7 103 1 "*"
V L "s" 7 110 "*int8" `755 
V L "endptr" 7 110 "*int8" `756 
F G "strtof" 7 110 "float(*int8 s,*int8 endptr)" `754  "provided for compatibility"
D G "strtof48" 7 116 "(s, e) strtof(s, e)"
D G "strtod" 7 117 "(s, e) strtof(s, e)"
C L "strtof" 7 103 1 "FUNCTION"
C L "strtof" 7 120 1 "*"
D G "atof" 7 124 "(s)   strtof(s, 0)"
C L "strtof" 7 120 1 "FUNCTION"
C L "strtof" 7 143 1 "*"
C L "strtof" 7 143 1 "*"
C L "strtof" 7 143 1 "*"
V L "s" 7 149 "*int8" `758 
F G "atoe" 7 149 "float(*int8 s)" `757  "Pseudo-random sequence generation functions"
C L "atoe" 7 143 1 "FUNCTION"
C L "atoe" 7 160 1 "*"
C L "atoe" 7 160 1 "*"
C L "atoe" 7 160 1 "*"
C L "atoe" 7 160 1 "*"
C L "atoe" 7 160 1 "*"
F G "rand" 7 169 "int16()" `759  "The srand function uses the argument as a seed for a new sequence of"
C L "rand" 7 171 1 "*"
C L "rand" 7 171 1 "*"
C L "rand" 7 171 1 "*"
C L "rand" 7 171 1 "*"
C L "rand" 7 171 1 "*"
C L "rand" 7 171 1 "*"
C L "rand" 7 171 1 "*"
C L "rand" 7 171 1 "*"
C L "rand" 7 171 1 "*"
C L "rand" 7 171 1 "*"
C L "rand" 7 171 1 "*"
C L "rand" 7 171 1 "*"
C L "rand" 7 171 1 "*"
C L "rand" 7 171 1 "*"
C L "rand" 7 171 1 "*"
V L "seed" 7 191 "int32" `761 
F G "srand" 7 191 "void(int32 seed)" `760  "Memory management functions"
C L "srand" 7 171 3 "FUNCTION"
V L "string" 7 205 "*int8" `763 
F G "system" 7 205 "sint8(*int8 string)" `762  "Searching and sorting utilities"
C L "system" 7 171 1 "FUNCTION"
C L "system" 7 211 1 "*"
C L "system" 7 211 1 "*"
C L "system" 7 211 1 "*"
C L "system" 7 211 1 "*"
C L "system" 7 211 1 "*"
C L "system" 7 211 1 "*"
C L "system" 7 211 1 "*"
C L "system" 7 211 1 "*"
C L "system" 7 211 1 "*"
C L "system" 7 211 1 "*"
C L "system" 7 211 4 "*"
C L "system" 7 229 1 "*"
C L "system" 7 229 1 "*"
C L "system" 7 229 1 "*"
C L "system" 7 229 1 "*"
C L "system" 7 229 1 "*"
C L "system" 7 229 1 "*"
C L "system" 7 229 1 "*"
C L "system" 7 229 1 "*"
D G "labs" 7 249 "abs"
V L "numer" 7 251 "sint8" `765 
V L "denom" 7 251 "sint8" `766 
F G "div" 7 251 "div_t(sint8 numer,sint8 denom)" `764 
V L "numer" 7 252 "sint16" `768 
V L "denom" 7 252 "sint16" `769 
F G "ldiv" 7 252 "ldiv_t(sint16 numer,sint16 denom)" `767  "Multibyte character functions"
C L "ldiv" 7 229 4 "FUNCTION"
C L "ldiv" 4 2 7 "FUNCTION"
C L "ldiv" 3 2 7 "FUNCTION"
V L "numer" 7 274 "sint8" `765 
V L "denom" 7 274 "sint8" `772 
F G "div" 7 275 "div_t(sint8 numer,sint8 denom)" `764 
V L "val" 7 276 "div_t" `770 
V L "numer" 7 282 "sint16" `768 
V L "denom" 7 282 "sint16" `779 
F G "ldiv" 7 283 "ldiv_t(sint16 numer,sint16 denom)" `767 
V L "val" 7 284 "ldiv_t" `777 
V L "s" 7 361 "*int8" `785 
F G "atoe" 7 362 "float(*int8 s)" `757 
V L "pow10" 7 363 "float" `784 
V L "result" 7 364 "float" `785 
V L "sign" 7 365 "int8" `786 
V L "expsign" 7 366 "int8" `787 
V L "c" 7 367 "int8" `788 
V L "ptr" 7 368 "int8" `789 
V L "i" 7 369 "int8" `790 
V L "exp" 7 370 "float" `791 
V L "expcnt" 7 371 "int8" `792 
C L "atoe" 7 397 1 "FUNCTION"
V L "s" 7 429 "*int8" `805 
F G "atoi" 7 430 "sint8(*int8 s)" `736 
V L "result" 7 431 "sint8" `804 
V L "sign" 7 432 "int8" `805 
V L "base" 7 432 "int8" `806 
V L "index" 7 432 "int8" `807 
V L "c" 7 433 "int8" `808 
C L "atoi" 7 397 1 "FUNCTION"
C L "atoi" 7 397 1 "FUNCTION"
C L "atoi" 7 397 1 "FUNCTION"
C L "atoi" 7 397 1 "FUNCTION"
C L "atoi" 7 397 1 "FUNCTION"
C L "atoi" 7 397 1 "FUNCTION"
V L "s" 7 498 "*int8" `810 
F G "atol" 7 499 "sint16(*int8 s)" `744 
V L "result" 7 500 "sint16" `809 
V L "sign" 7 501 "int8" `810 
V L "base" 7 501 "int8" `811 
V L "index" 7 501 "int8" `812 
V L "c" 7 502 "int8" `813 
C L "atol" 7 397 1 "FUNCTION"
C L "atol" 7 397 1 "FUNCTION"
C L "atol" 7 397 1 "FUNCTION"
C L "atol" 7 397 1 "FUNCTION"
C L "mult_with10" 7 397 1 "FUNCTION"
V L "num" 7 565 "int32" `815 
F G "mult_with10" 7 566 "sint32(int32 num)" `814 
V L "s" 7 571 "*int8" `817 
F G "atoi32" 7 572 "sint32(*int8 s)" `738 
V L "result" 7 573 "sint32" `816 
V L "sign" 7 574 "int8" `817 
V L "base" 7 574 "int8" `818 
V L "index" 7 574 "int8" `819 
V L "c" 7 575 "int8" `820 
C L "atoi32" 7 397 1 "FUNCTION"
C L "atoi32" 7 397 1 "FUNCTION"
C L "atoi32" 7 397 1 "FUNCTION"
C L "atoi32" 7 397 1 "FUNCTION"
C L "atoi32" 7 397 1 "FUNCTION"
V L "num" 7 770 "sint32" `741 
V L "base" 7 770 "int8" `742 
V L "s" 7 770 "*int8" `824 
F G "itoa" 7 771 "*int8(sint32 num,int8 base,*int8 s)" `740 
V L "temp" 7 772 "int32" `821 
V L "i" 7 773 "int8" `822 
V L "sign" 7 773 "int8" `823 
V L "cnt" 7 773 "int8" `824 
V L "c" 7 774 "int8" `825 
C L "itoa" 7 397 1 "FUNCTION"
C L "itoa" 7 397 1 "FUNCTION"
C L "itoa" 7 397 1 "FUNCTION"
C L "itoa" 7 397 1 "FUNCTION"
C L "itoa" 7 397 1 "FUNCTION"
V L "s" 7 885 "*int8" `755 
V L "endptr" 7 885 "*int8" `834 
F G "strtof" 7 886 "float(*int8 s,*int8 endptr)" `754 
V L "pow10" 7 887 "float" `832 
V L "result" 7 888 "float" `833 
V L "skip" 7 889 "int1" `834 
V L "sign" 7 889 "int1" `835 
V L "point" 7 889 "int1" `836 
V L "c" 7 890 "int8" `837 
V L "ptr" 7 891 "int8" `838 
V L "s" 7 1103 "*int8" `751 
V L "endptr" 7 1103 "*int8" `752 
V L "base" 7 1103 "sint8" `843 
F G "strtoul" 7 1104 "int16(*int8 s,*int8 endptr,sint8 base)" `750 
V L "sc" 7 1105 "*int8" `840 
V L "s1" 7 1105 "*int8" `841 
V L "sd" 7 1105 "*int8" `842 
V L "x" 7 1106 "int16" `843 
V L "sign" 7 1107 "int8" `844 
V L "digits" 7 1108 "int8[1]" `845 
C L "strtoul" 7 397 1 "FUNCTION"
C L "strtoul" 7 397 1 "FUNCTION"
C L "strtoul" 7 397 1 "FUNCTION"
V L "s" 7 1165 "*int8" `747 
V L "endptr" 7 1165 "*int8" `748 
V L "base" 7 1165 "sint8" `850 
F G "strtol" 7 1166 "sint16(*int8 s,*int8 endptr,sint8 base)" `746 
V L "sc" 7 1167 "*int8" `847 
V L "s1" 7 1167 "*int8" `848 
V L "sd" 7 1167 "*int8" `849 
V L "x" 7 1168 "sint16" `850 
V L "sign" 7 1169 "int8" `851 
V L "digits" 7 1170 "int8[1]" `852 
C L "strtol" 7 397 1 "FUNCTION"
C L "strtol" 7 397 1 "FUNCTION"
C L "strtol" 7 397 1 "FUNCTION"
V L "string" 7 1228 "*int8" `855 
F G "system" 7 1229 "sint8(*int8 string)" `762 
V L "s" 7 1233 "*int8" `855 
V L "n" 7 1233 "int16" `856 
F G "mblen" 7 1234 "int8(*int8 s,int16 n)" `854 
V L "pwc" 7 1238 "*int8" `858 
V L "s" 7 1238 "*int8" `859 
V L "n" 7 1238 "int16" `860 
F G "mbtowc" 7 1239 "int8(*int8 pwc,*int8 s,int16 n)" `857 
V L "s" 7 1244 "*int8" `862 
V L "wchar" 7 1244 "int8" `863 
F G "wctomb" 7 1245 "int8(*int8 s,int8 wchar)" `861 
V L "pwcs" 7 1250 "*int8" `865 
V L "s" 7 1250 "*int8" `866 
V L "n" 7 1250 "int16" `867 
F G "mbstowcs" 7 1251 "int16(*int8 pwcs,*int8 s,int16 n)" `864 
V L "s" 7 1256 "*int8" `869 
V L "pwcs" 7 1256 "*int8" `870 
V L "n" 7 1256 "int16" `871 
F G "wcstombs" 7 1257 "int16(*int8 s,*int8 pwcs,int16 n)" `868 
V G "_Randseed" 7 1266 "int32" `872 
F G "rand" 7 1269 "int16()" `759 
V L "seed" 7 1274 "int32" `877 
F G "srand" 7 1275 "void(int32 seed)" `760 
V L "p1" 7 1284 "*int8" `877 
V L "p2" 7 1284 "*int8" `878 
T G "*_Cmpfun" 7 1284 "sint8(*int8 p1,*int8 p2)" `876 
V L "qdata" 7 1291 "*int8" `881 
V L "qitems" 7 1291 "int8" `882 
V L "qsize" 7 1291 "int8" `883 
V L "cmp" 7 1291 "_Cmpfun" `884 
F G "qsort" 7 1291 "void(*int8 qdata,int8 qitems,int8 qsize,_Cmpfun cmp)" `880 
V L "m" 7 1292 "int8" `885 
V L "j" 7 1292 "int8" `886 
V L "i" 7 1292 "int8" `887 
V L "l" 7 1292 "int8" `888 
V L "done" 7 1293 "int1" `889 
V L "t" 7 1294 "int8[16]" `890 
V L "key" 7 1319 "*int8" `893 
V L "base" 7 1319 "*int8" `894 
V L "num" 7 1319 "int16" `895 
V L "width" 7 1319 "int16" `896 
V L "cmp" 7 1319 "_Cmpfun" `897 
F G "bsearch" 7 1320 "*int8(*int8 key,*int8 base,int16 num,int16 width,_Cmpfun cmp)" `892 
V L "p" 7 1321 "*int8" `898 
V L "q" 7 1321 "*int8" `899 
V L "n" 7 1322 "int16" `900 
V L "pivot" 7 1323 "int16" `901 
V L "val" 7 1324 "sint8" `902 
C L "bsearch" 7 397 1 "FUNCTION"
D G "RED_PIN" 0 19 "PIN_D1"
D G "GREEN_PIN" 0 20 "PIN_D0"
D G "BLUE_PIN" 0 21 "PIN_D2"
V G "rgb_buffer" 0 25 "uint16_t[3]" `915 
V G "rgb_map" 0 28 "uint16_t[3]" `916 
V G "cursor_map" 0 32 "uint8_t[3]" `917 
D G "LCD_CLEARDISPLAY" 8 2 "0x01"
D G "LCD_RETURNHOME" 8 3 "0x02"
D G "LCD_ENTRYMODESET" 8 4 "0x04"
D G "LCD_DISPLAYCONTROL" 8 5 "0x08"
D G "LCD_CURSORSHIFT" 8 6 "0x10"
D G "LCD_FUNCTIONSET" 8 7 "0x20"
D G "LCD_SETCGRAMADDR" 8 8 "0x40"
D G "LCD_SETDDRAMADDR" 8 9 "0x80"
D G "LCD_ENTRYRIGHT" 8 12 "0x00"
D G "LCD_ENTRYLEFT" 8 13 "0x02"
D G "LCD_ENTRYSHIFTINCREMENT" 8 14 "0x01"
D G "LCD_ENTRYSHIFTDECREMENT" 8 15 "0x00"
D G "LCD_DISPLAYON" 8 19 "0x04"
D G "LCD_DISPLAYOFF" 8 20 "0x00"
D G "LCD_CURSORON" 8 21 "0x02"
D G "LCD_CURSOROFF" 8 22 "0x00"
D G "LCD_BLINKON" 8 23 "0x01"
D G "LCD_BLINKOFF" 8 24 "0x00"
D G "LCD_DISPLAYMOVE" 8 27 "0x08"
D G "LCD_CURSORMOVE" 8 28 "0x00"
D G "LCD_MOVERIGHT" 8 29 "0x04"
D G "LCD_MOVELEFT" 8 30 "0x00"
D G "LCD_8BITMODE" 8 33 "0x10"
D G "LCD_4BITMODE" 8 34 "0x00"
D G "LCD_2LINE" 8 35 "0x08"
D G "LCD_1LINE" 8 36 "0x00"
D G "LCD_5x10DOTS" 8 37 "0x04"
D G "LCD_5x8DOTS" 8 38 "0x00"
D G "LCD_BACKLIGHT" 8 41 "0x08"
D G "LCD_NOBACKLIGHT" 8 42 "0x00"
D G "En" 8 45 "0b00000100" "Enable bit"
D G "Rw" 8 46 "0b00000010" "Read/Write bit"
V G "_address" 8 48 "uint8_t" `918 
V G "_backlightVal" 8 49 "uint8_t" `919 
V G "_displayControl" 8 50 "uint8_t" `920 
V G "_displayFunction" 8 51 "uint8_t" `921 
V G "_displayMode" 8 52 "uint8_t" `922 
V G "_rows" 8 53 "uint8_t" `923 
V G "_columns" 8 54 "uint8_t" `924  "sends code to pcf8574 so it redirects to the display"
V L "_data" 8 57 "uint8_t" `926 
F G "expanderWrite" 8 57 "void(uint8_t _data)" `925 
C L "expanderWrite" 8 1 1 "FUNCTION"
C L "pulseEnable" 8 1 1 "FUNCTION"
V L "_data" 8 67 "uint8_t" `928 
F G "pulseEnable" 8 67 "void(uint8_t _data)" `927 
C L "write4bits" 8 1 1 "FUNCTION"
V L "value" 8 76 "uint8_t" `930 
F G "write4bits" 8 76 "void(uint8_t value)" `929 
C L "send" 8 1 1 "FUNCTION"
V L "value" 8 82 "uint8_t" `932 
V L "mode" 8 82 "uint8_t" `933 
F G "send" 8 82 "void(uint8_t value,uint8_t mode)" `931 
V L "MSB" 8 83 "uint8_t" `934 
V L "LSB" 8 84 "uint8_t" `935 
C L "command" 8 1 1 "FUNCTION"
V L "value" 8 90 "uint8_t" `937 
F G "command" 8 90 "void(uint8_t value)" `936 
C L "write" 8 1 1 "FUNCTION"
V L "value" 8 95 "uint8_t" `939 
F G "write" 8 95 "int8(uint8_t value)" `938 
C L "display" 8 1 1 "FUNCTION"
F G "display" 8 101 "void()" `940 
C L "clear" 8 1 1 "FUNCTION"
F G "clear" 8 107 "void()" `941 
C L "home" 8 1 1 "FUNCTION"
F G "home" 8 113 "void()" `942 
C L "setCursor" 8 1 2 "FUNCTION"
V L "col" 8 120 "uint8_t" `944 
V L "row" 8 120 "uint8_t" `945 
F G "setCursor" 8 120 "void(uint8_t col,uint8_t row)" `943 
V L "row_offsets" 8 121 "int8[1]" `946 
C L "printstr" 8 1 1 "FUNCTION"
V L "c" 8 128 "*int8" `951 
F G "printstr" 8 128 "void(*int8 c)" `950 
V L "i" 8 129 "int8" `953 
C L "printint" 8 1 1 "FUNCTION"
V L "d" 8 137 "uint16_t" `955 
F G "printint" 8 137 "void(uint16_t d)" `954 
V L "c" 8 138 "int8[16]" `956 
C L "printlong" 8 1 1 "FUNCTION"
V L "d" 8 144 "uint16_t" `964 
F G "printlong" 8 144 "void(uint16_t d)" `963 
V L "c" 8 145 "int8[16]" `965 
C L "initializeLCD" 8 1 1 "FUNCTION"
V L "address" 8 151 "uint8_t" `968 
V L "columns" 8 151 "uint8_t" `969 
V L "rows" 8 151 "uint8_t" `970 
F G "initializeLCD" 8 151 "void(uint8_t address,uint8_t columns,uint8_t rows)" `967 
D G "LINHA0" 9 2 "PIN_B7"
D G "LINHA1" 9 3 "PIN_B6"
D G "LINHA2" 9 4 "PIN_B5"
D G "LINHA3" 9 5 "PIN_B4"
D G "COLUN0" 9 6 "PIN_B3"
D G "COLUN1" 9 7 "PIN_B2"
D G "COLUN2" 9 8 "PIN_B1"
D G "COLUN3" 9 9 "PIN_B0"
V G "linhas" 9 12 "uint8_t[4]" `971 
V G "colunas" 9 13 "uint8_t[4]" `972 
V G "input_array" 9 16 "int8[4][4]" `973 
V G "pos_cursor" 9 19 "uint8_t" `975 
V G "color_selected" 9 22 "uint8_t" `976 
C L "ipow" 9 1 1 "FUNCTION"
V L "base" 9 25 "uint16_t" `978 
V L "exp" 9 25 "uint16_t" `979 
F G "ipow" 9 26 "int8(uint16_t base,uint16_t exp)" `977 
V L "result" 9 27 "uint16_t" `980 
C L "write_color" 9 1 1 "FUNCTION"
V L "color" 9 43 "uint16_t" `982 
F G "write_color" 9 43 "void(uint16_t color)" `981 
C L "showErr" 9 1 1 "FUNCTION"
F G "showErr" 9 52 "void()" `983 
V L "error_msg" 9 56 "int8[4]" `984 
C L "user_input" 9 1 1 "FUNCTION"
V L "digited" 9 67 "uint16_t" `986 
F G "user_input" 9 67 "void(uint16_t digited)" `985  "convert from ascii to int"
C L "user_input" 9 1 1 "FUNCTION"
C L "user_input" 9 1 1 "FUNCTION"
C L "user_input" 9 1 1 "FUNCTION"
C L "user_input" 9 1 1 "FUNCTION"
C L "user_input" 9 1 1 "FUNCTION"
C L "user_input" 9 1 1 "FUNCTION"
C L "user_input" 9 1 1 "FUNCTION"
C L "user_input" 9 1 1 "FUNCTION"
C L "user_input" 9 1 1 "FUNCTION"
C L "user_input" 9 1 1 "FUNCTION"
C L "user_input" 9 1 1 "FUNCTION"
C L "user_input" 9 1 1 "FUNCTION"
C L "user_input" 9 1 1 "FUNCTION"
C L "scanPorts" 9 1 1 "FUNCTION"
F G "scanPorts" 9 143 "void()" `987 
V L "linha" 9 144 "int8" `988 
V L "coluna" 9 147 "int8" `993 
C L "scanPorts" 9 1 1 "FUNCTION"
V G "counter" 0 42 "uint8_t" `997 
F G "TIMER2_isr" 0 46 "void()" `998  "it checks if the color value is greater than the pulse"
C L "TIMER2_isr" 0 41 2 "FUNCTION"
F G "MAIN" 0 56 "void()" `999  "PIC uses 7 bit + R/W"
C L "MAIN" 0 41 1 "FUNCTION"
V L "c" 0 64 "int8[16]" `1002 
V L "d" 0 69 "int8[16]" `1003 
C L "MAIN" 0 41 1 "FUNCTION"
F B "reset_cpu" 0 0
F B "abs" 1 0
F B "sleep" 0 0
F B "delay_cycles" 1 0
F B "read_bank" 2 0
F B "write_bank" 3 0
F B "shift_left" 2 2
F B "shift_right" 2 2
F B "rotate_left" 2 0
F B "rotate_right" 2 0
F B "_mul" 2 0
F B "memset" 3 0
F B "isamoung" 2 0
F B "isamong" 2 0
F B "bit_set" 2 0
F B "bit_clear" 2 0
F B "bit_test" 2 0
F B "toupper" 1 0
F B "tolower" 1 0
F B "swap" 1 0
F B "printf" 1 255
F B "fprintf" 1 255
F B "sprintf" 1 255
F B "make8" 2 0
F B "make16" 2 0
F B "make32" 1 255
F B "label_address" 1 1
F B "goto_address" 1 0
F B "_va_arg" 1 0
F B "offsetofbit" 2 2
F B "_iosctrl" 1 2
F B "enable_interrupts" 1 0
F B "disable_interrupts" 1 0
F B "interrupt_active" 1 0
F B "clear_interrupt" 1 0
F B "jump_to_isr" 1 0
F B "ext_int_edge" 1 2
F B "read_eeprom" 1 0
F B "write_eeprom" 2 0
F B "read_program_eeprom" 1 0
F B "write_program_eeprom" 2 0
F B "write_program_memory" 4 0
F B "write_program_memory8" 4 0
F B "read_program_memory" 4 0
F B "read_program_memory8" 4 0
F B "read_rom_memory" 3 0
F B "strcpy" 2 0
F B "memcpy" 3 0
F B "strstr100" 2 0
F B "output_high" 1 0
F B "output_low" 1 0
F B "input" 1 0
F B "input_state" 1 0
F B "output_float" 1 0
F B "output_drive" 1 0
F B "output_bit" 1 1
F B "output_toggle" 1 0
F B "output_a" 1 0
F B "output_b" 1 0
F B "output_c" 1 0
F B "output_d" 1 0
F B "output_e" 1 0
F B "input_a" 0 0
F B "input_b" 0 0
F B "input_c" 0 0
F B "input_d" 0 0
F B "input_e" 0 0
F B "set_tris_a" 1 0
F B "set_tris_b" 1 0
F B "set_tris_c" 1 0
F B "set_tris_d" 1 0
F B "set_tris_e" 1 0
F B "get_tris_a" 0 0
F B "get_tris_b" 0 0
F B "get_tris_c" 0 0
F B "get_tris_d" 0 0
F B "get_tris_e" 0 0
F B "input_change_a" 0 0
F B "input_change_b" 0 0
F B "input_change_c" 0 0
F B "input_change_d" 0 0
F B "input_change_e" 0 0
F B "port_b_pullups" 1 0
F B "setup_counters" 2 0
F B "setup_wdt" 1 0
F B "restart_cause" 0 0
F B "restart_wdt" 0 0
F B "get_rtcc" 0 0
F B "set_rtcc" 1 0
F B "get_timer0" 0 0
F B "set_timer0" 1 0
F B "setup_comparator" 1 0
F B "setup_port_a" 1 2
F B "setup_adc_ports" 1 2
F B "get_adc_ports" 0 0
F B "setup_adc" 1 0
F B "set_adc_channel" 1 0
F B "read_adc" 0 1
F B "adc_done" 0 0
F B "setup_timer_0" 1 0
F B "setup_vref" 1 0
F B "setup_timer_1" 1 0
F B "get_timer1" 0 0
F B "set_timer1" 1 0
F B "setup_timer_2" 3 0
F B "get_timer2" 0 0
F B "set_timer2" 1 0
F B "setup_ccp1" 1 0
F B "set_pwm1_duty" 1 0
F B "setup_ccp2" 1 0
F B "set_pwm2_duty" 1 0
F B "setup_psp" 1 0
F B "psp_output_full" 0 0
F B "psp_input_full" 0 0
F B "psp_overflow" 0 0
F B "setup_spi" 1 0
F B "spi_read" 0 1
F B "spi_write" 1 2
F B "spi_data_is_in" 0 0
F B "setup_spi2" 1 0
F B "spi_read2" 0 1
F B "spi_write2" 1 0
F B "spi_data_is_in2" 0 0
F B "delay_ms" 1 0
F B "delay_us" 1 0
F B "i2c_read" 0 2
F B "i2c_write" 1 2
F B "i2c_start" 0 2
F B "i2c_stop" 0 1
F B "i2c_isr_state" 0 1
F B "i2c_poll" 0 1
F B "i2c_speed" 1 2
F B "i2c_init" 1 2
