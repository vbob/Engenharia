CCS PCM C Compiler, Version 5.015, 5967               05-mai-18 23:38

               Filename:   D:\engenharia\7º Período\Microcontroladores\motor_passo\code\main.lst

               ROM used:   502 words (6%)
                           Largest free fragment is 2048
               RAM used:   13 (4%) at main() level
                           33 (9%) worst case
               Stack used: 3 locations
               Stack size: 8

*
0000:  MOVLW  01
0001:  MOVWF  0A
0002:  GOTO   1D6
0003:  NOP
.................... #include <16F877A.h> 
.................... //////////// Standard Header file for the PIC16F877A device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F877A 
0004:  MOVF   2E,W
0005:  ANDLW  07
0006:  MOVWF  77
0007:  RRF    2E,W
0008:  MOVWF  78
0009:  RRF    78,F
000A:  RRF    78,F
000B:  MOVLW  1F
000C:  ANDWF  78,F
000D:  MOVF   78,W
000E:  ADDWF  30,W
000F:  MOVWF  04
0010:  BCF    03.7
0011:  BTFSC  31.0
0012:  BSF    03.7
0013:  CLRF   78
0014:  INCF   78,F
0015:  INCF   77,F
0016:  GOTO   018
0017:  RLF    78,F
0018:  DECFSZ 77,F
0019:  GOTO   017
001A:  MOVF   2F,F
001B:  BTFSC  03.2
001C:  GOTO   020
001D:  MOVF   78,W
001E:  IORWF  00,F
001F:  GOTO   023
0020:  COMF   78,F
0021:  MOVF   78,W
0022:  ANDWF  00,F
0023:  RETURN
*
0055:  MOVLW  10
0056:  MOVWF  3B
0057:  CLRF   77
0058:  CLRF   7A
0059:  RRF    38,F
005A:  RRF    37,F
005B:  BTFSS  03.0
005C:  GOTO   063
005D:  MOVF   39,W
005E:  ADDWF  77,F
005F:  BTFSC  03.0
0060:  INCF   7A,F
0061:  MOVF   3A,W
0062:  ADDWF  7A,F
0063:  RRF    7A,F
0064:  RRF    77,F
0065:  RRF    79,F
0066:  RRF    78,F
0067:  DECFSZ 3B,F
0068:  GOTO   059
*
0078:  CLRF   77
0079:  CLRF   78
007A:  MOVF   37,W
007B:  BCF    03.0
007C:  BTFSC  38.0
007D:  ADDWF  77,F
007E:  RRF    77,F
007F:  RRF    78,F
0080:  BTFSC  38.1
0081:  ADDWF  77,F
0082:  RRF    77,F
0083:  RRF    78,F
0084:  BTFSC  38.2
0085:  ADDWF  77,F
0086:  RRF    77,F
0087:  RRF    78,F
0088:  BTFSC  38.3
0089:  ADDWF  77,F
008A:  RRF    77,F
008B:  RRF    78,F
008C:  BTFSC  38.4
008D:  ADDWF  77,F
008E:  RRF    77,F
008F:  RRF    78,F
0090:  BTFSC  38.5
0091:  ADDWF  77,F
0092:  RRF    77,F
0093:  RRF    78,F
0094:  BTFSC  38.6
0095:  ADDWF  77,F
0096:  RRF    77,F
0097:  RRF    78,F
0098:  BTFSC  38.7
0099:  ADDWF  77,F
009A:  RRF    77,F
009B:  RRF    78,F
*
00B6:  CLRF   78
00B7:  CLRF   79
00B8:  CLRF   77
00B9:  CLRF   7A
00BA:  MOVF   3A,W
00BB:  BTFSS  03.2
00BC:  GOTO   0C0
00BD:  MOVF   39,W
00BE:  BTFSC  03.2
00BF:  GOTO   0DA
00C0:  MOVLW  10
00C1:  MOVWF  3B
00C2:  BCF    03.0
00C3:  RLF    37,F
00C4:  RLF    38,F
00C5:  RLF    77,F
00C6:  RLF    7A,F
00C7:  MOVF   3A,W
00C8:  SUBWF  7A,W
00C9:  BTFSS  03.2
00CA:  GOTO   0CD
00CB:  MOVF   39,W
00CC:  SUBWF  77,W
00CD:  BTFSS  03.0
00CE:  GOTO   0D6
00CF:  MOVF   39,W
00D0:  SUBWF  77,F
00D1:  BTFSS  03.0
00D2:  DECF   7A,F
00D3:  MOVF   3A,W
00D4:  SUBWF  7A,F
00D5:  BSF    03.0
00D6:  RLF    78,F
00D7:  RLF    79,F
00D8:  DECFSZ 3B,F
00D9:  GOTO   0C2
....................  
.................... #list 
....................  
.................... #device ADC=16 
....................  
.................... #FUSES NOWDT                    //No Watch Dog Timer 
.................... #FUSES NOLVP                    //No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
....................  
.................... #use delay(crystal=20000000) 
*
0024:  MOVLW  03
0025:  SUBWF  38,F
0026:  BTFSS  03.0
0027:  GOTO   032
0028:  MOVLW  38
0029:  MOVWF  04
002A:  BCF    03.7
002B:  MOVF   00,W
002C:  BTFSC  03.2
002D:  GOTO   032
002E:  GOTO   030
002F:  GOTO   030
0030:  DECFSZ 00,F
0031:  GOTO   02F
0032:  RETURN
.................... #use FIXED_IO(D_outputs=PIN_D0,PIN_D1,PIN_D2,PIN_D3,PIN_D4,PIN_D5,PIN_D6,PIN_D7) 
.................... #use FIXED_IO(E_outputs=PIN_E2) 
.................... #use FIXED_IO(B_outputs=PIN_B3, PIN_B4, PIN_B5) 
....................  
.................... #include <stdint.h> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                   //// 
.................... ////                           stdint.h                                //// 
.................... ////                                                                   //// 
.................... //// Standard integer definitions.                                     //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2008 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _STDINT 
....................  
.................... #define _STDINT 
....................  
.................... //////////// exact width 
....................  
.................... typedef signed int8 int8_t; 
.................... typedef unsigned int8 uint8_t; 
.................... typedef signed int16 int16_t; 
.................... typedef unsigned int16 uint16_t; 
.................... typedef signed int32 int32_t; 
.................... typedef unsigned int32 uint32_t; 
....................  
.................... #if defined(__PCD__) 
.................... //typedef signed int24 int24_t; 
.................... //typedef unsigned int24 uint24_t; 
.................... typedef signed int64 int64_t; 
.................... typedef unsigned int64 uint64_t; 
.................... #endif 
....................  
.................... #define INT8_MAX  (128) 
.................... #define INT8_MIN  (-127) 
.................... #define UINT8_MAX (255) 
....................  
.................... #define INT16_MAX  (32767) 
.................... #define INT16_MIN  (-32768) 
.................... #define UINT16_MAX (65535) 
....................  
.................... #define INT32_MAX  (2147483647) 
.................... #define INT32_MIN  (-2147483648) 
.................... #define UINT32_MAX (4294967295) 
....................  
.................... #if defined(__PCD__) 
.................... //#define INT24_MAX  (8388607) 
.................... //#define INT24_MIN  (-8388608) 
.................... //#define UINT24_MAX (16777215) 
....................  
.................... #define INT64_MAX  (9223372036854775807) 
.................... #define INT64_MIN  (-9223372036854775808) 
.................... #define UINT64_MAX (18446744073709551615) 
.................... #endif 
....................  
.................... ///////// minimum width 
....................  
.................... typedef signed int8 int_least8_t; 
.................... typedef unsigned int8 uint_least8_t; 
.................... typedef signed int16 int_least16_t; 
.................... typedef unsigned int16 uint_least16_t; 
.................... typedef signed int32 int_least32_t; 
.................... typedef unsigned int32 uint_least32_t; 
....................  
.................... #if defined(__PCD__) 
.................... //typedef signed int24 int_least24_t; 
.................... //typedef unsigned int24 uint_least24_t; 
.................... typedef signed int64 int_least64_t; 
.................... typedef unsigned int64 uint_least64_t; 
.................... #endif 
....................  
.................... #define INT_LEAST8_MAX  (128) 
.................... #define INT_LEAST8_MIN  (-127) 
.................... #define UINT_LEAST8_MAX (255) 
....................  
.................... #define INT_LEAST16_MAX  (32767) 
.................... #define INT_LEAST16_MIN  (-32768) 
.................... #define UINT_LEAST16_MAX (65535) 
....................  
.................... #define INT_LEAST32_MAX  (2147483647) 
.................... #define INT_LEAST32_MIN  (-2147483648) 
.................... #define UINT_LEAST32_MAX (4294967295) 
....................  
.................... #if defined(__PCD__) 
.................... //#define INT_LEAST24_MAX  (8388607) 
.................... //#define INT_LEAST24_MIN  (-8388608) 
.................... //#define UINT_LEAST24_MAX (16777215) 
....................  
.................... #define INT_LEAST64_MAX  (9223372036854775807) 
.................... #define INT_LEAST64_MIN  (-9223372036854775808) 
.................... #define UINT_LEAST64_MAX (18446744073709551615) 
.................... #endif 
....................  
.................... ///////// fastest width 
....................  
.................... #if defined(__PCD__) 
.................... typedef signed int16 int_fast8_t; 
.................... typedef unsigned int16 uint_fast8_t; 
.................... #define INT_FAST8_MAX  (32767) 
.................... #define INT_FAST8_MIN  (-32768) 
.................... #define UINT_FAST8_MAX (65535) 
.................... typedef signed int16 int_fast16_t; 
.................... typedef unsigned int16 uint_fast16_t; 
.................... //typedef signed int24 int_fast24_t; 
.................... //typedef unsigned int24 uint_fast24_t; 
.................... typedef signed int64 int_fast64_t; 
.................... typedef unsigned int64 uint_fast64_t; 
.................... #else 
.................... typedef signed int8 int_fast8_t; 
.................... typedef unsigned int8 uint_fast8_t; 
.................... #define INT_FAST8_MAX  (128) 
.................... #define INT_FAST8_MIN  (-127) 
.................... #define UINT_FAST8_MAX (255) 
.................... typedef signed int16 int_fast16_t; 
.................... typedef unsigned int16 uint_fast16_t; 
.................... #endif 
....................  
.................... typedef signed int32 int_fast32_t; 
.................... typedef unsigned int32 uint_fast32_t; 
....................  
.................... #define INT_FAST16_MAX  (32767) 
.................... #define INT_FAST16_MIN  (-32768) 
.................... #define UINT_FAST16_MAX (65535) 
....................  
.................... #define INT_FAST32_MAX  (2147483647) 
.................... #define INT_FAST32_MIN  (-2147483648) 
.................... #define UINT_FAST32_MAX (4294967295) 
....................  
.................... #if defined(__PCD__) 
.................... //#define INT_FAST24_MAX  (8388607) 
.................... //#define INT_FAST24_MIN  (-8388608) 
.................... //#define UINT_FAST24_MAX (16777215) 
....................  
.................... #define INT_FAST64_MAX  (9223372036854775807) 
.................... #define INT_FAST64_MIN  (-9223372036854775808) 
.................... #define UINT_FAST64_MAX (18446744073709551615) 
.................... #endif 
....................  
.................... //////////// big enough to hold pointers (OPTIONAL) 
....................  
.................... /// TODO 
....................  
.................... /// intptr_t uintptr_t 
....................  
.................... /// INTPTRN_MIN INTPTRN_MAX UINTPTRN_MAX 
....................  
....................  
.................... /////////// greatest width (OPTIONAL) 
....................  
.................... /// TODO 
....................  
.................... /// intmax_t uintmax_t 
....................  
.................... /// INTMAXN_MIN INTMAXN_MAX UINTMAXN_MAX 
....................  
.................... /// INTMAX_C(value) UINTMAX_C(value) 
....................  
....................  
.................... #endif 
....................  
.................... byte steps[] = { 
....................    0b00000001, 
....................    0b00000010, 
....................    0b00000100, 
....................    0b00001000 
.................... }; 
*
01E6:  MOVLW  01
01E7:  BCF    03.5
01E8:  MOVWF  20
01E9:  MOVLW  02
01EA:  MOVWF  21
01EB:  MOVLW  04
01EC:  MOVWF  22
01ED:  MOVLW  08
01EE:  MOVWF  23
....................  
.................... #define COLUN1 PIN_B2 
.................... #define COLUN2 PIN_B1 
.................... #define COLUN3 PIN_B0 
.................... #define LINHA1 PIN_B5 
.................... #define LINHA2 PIN_B4 
.................... #define LINHA3 PIN_B3 
....................  
.................... int passo_direita = 0; 
.................... int vel_passo = 5; 
.................... int vel_cc = 5; 
....................  
.................... int pos = 0; 
....................  
.................... void girarMotores(); 
....................  
.................... void scanPorts() { 
....................    uint8_t ports[] = {0, PIN_B5, PIN_B4, PIN_B3 }; 
*
0117:  CLRF   28
0118:  MOVLW  35
0119:  MOVWF  29
011A:  MOVLW  34
011B:  MOVWF  2A
011C:  MOVLW  33
011D:  MOVWF  2B
....................  
....................    for (int linha = 1; linha <= 3; linha++) { 
011E:  MOVLW  01
011F:  MOVWF  2C
0120:  MOVF   2C,W
0121:  SUBLW  03
0122:  BTFSS  03.0
0123:  GOTO   1D3
....................       output_high(ports[1]); 
0124:  MOVF   29,W
0125:  MOVWF  2E
0126:  MOVLW  01
0127:  MOVWF  2F
0128:  CLRF   31
0129:  CLRF   30
012A:  CALL   004
012B:  MOVF   29,W
012C:  MOVWF  2E
012D:  CLRF   2F
012E:  CLRF   31
012F:  MOVLW  80
0130:  MOVWF  30
0131:  CALL   004
....................       output_high(ports[2]); 
0132:  MOVF   2A,W
0133:  MOVWF  2E
0134:  MOVLW  01
0135:  MOVWF  2F
0136:  CLRF   31
0137:  CLRF   30
0138:  CALL   004
0139:  MOVF   2A,W
013A:  MOVWF  2E
013B:  CLRF   2F
013C:  CLRF   31
013D:  MOVLW  80
013E:  MOVWF  30
013F:  CALL   004
....................       output_high(ports[3]); 
0140:  MOVF   2B,W
0141:  MOVWF  2E
0142:  MOVLW  01
0143:  MOVWF  2F
0144:  CLRF   31
0145:  CLRF   30
0146:  CALL   004
0147:  MOVF   2B,W
0148:  MOVWF  2E
0149:  CLRF   2F
014A:  CLRF   31
014B:  MOVLW  80
014C:  MOVWF  30
014D:  CALL   004
....................       output_low(ports[linha]); 
014E:  MOVLW  28
014F:  ADDWF  2C,W
0150:  MOVWF  04
0151:  BCF    03.7
0152:  MOVF   00,W
0153:  MOVWF  2D
0154:  MOVWF  2E
0155:  CLRF   2F
0156:  CLRF   31
0157:  CLRF   30
0158:  CALL   004
0159:  MOVF   2D,W
015A:  MOVWF  2E
015B:  CLRF   2F
015C:  CLRF   31
015D:  MOVLW  80
015E:  MOVWF  30
015F:  CALL   004
....................        
....................       if (linha == 2 && !input(COLUN2)) { 
0160:  MOVF   2C,W
0161:  SUBLW  02
0162:  BTFSS  03.2
0163:  GOTO   179
0164:  MOVLW  C7
0165:  BSF    03.5
0166:  MOVWF  06
0167:  BCF    03.5
0168:  BTFSC  06.1
0169:  GOTO   179
....................          passo_direita = !passo_direita; 
016A:  MOVF   24,F
016B:  BTFSC  03.2
016C:  GOTO   16F
016D:  MOVLW  00
016E:  GOTO   170
016F:  MOVLW  01
0170:  MOVWF  24
....................          while (!input(COLUN2)) { 
0171:  MOVLW  C7
0172:  BSF    03.5
0173:  MOVWF  06
0174:  BCF    03.5
0175:  BTFSC  06.1
0176:  GOTO   179
....................             girarMotores(); 
0177:  CALL   033
0178:  GOTO   171
....................          } 
....................       } 
....................        
....................       if (linha == 3 && !input(COLUN3) && vel_passo > 1) { 
0179:  MOVF   2C,W
017A:  SUBLW  03
017B:  BTFSS  03.2
017C:  GOTO   190
017D:  MOVLW  C7
017E:  BSF    03.5
017F:  MOVWF  06
0180:  BCF    03.5
0181:  BTFSC  06.0
0182:  GOTO   190
0183:  MOVF   25,W
0184:  SUBLW  01
0185:  BTFSC  03.0
0186:  GOTO   190
....................          vel_passo--; 
0187:  DECF   25,F
....................          while (!input(COLUN3)) { 
0188:  MOVLW  C7
0189:  BSF    03.5
018A:  MOVWF  06
018B:  BCF    03.5
018C:  BTFSC  06.0
018D:  GOTO   190
....................             girarMotores(); 
018E:  CALL   033
018F:  GOTO   188
....................          } 
....................       } 
....................        
....................       if (linha == 3 && !input(COLUN1) && vel_passo < 6) { 
0190:  MOVF   2C,W
0191:  SUBLW  03
0192:  BTFSS  03.2
0193:  GOTO   1A7
0194:  MOVLW  C7
0195:  BSF    03.5
0196:  MOVWF  06
0197:  BCF    03.5
0198:  BTFSC  06.2
0199:  GOTO   1A7
019A:  MOVF   25,W
019B:  SUBLW  05
019C:  BTFSS  03.0
019D:  GOTO   1A7
....................          vel_passo++; 
019E:  INCF   25,F
....................          while (!input(COLUN1)) { 
019F:  MOVLW  C7
01A0:  BSF    03.5
01A1:  MOVWF  06
01A2:  BCF    03.5
01A3:  BTFSC  06.2
01A4:  GOTO   1A7
....................             girarMotores(); 
01A5:  CALL   033
01A6:  GOTO   19F
....................          } 
....................       } 
....................        
....................       if (linha == 1 && !input(COLUN3) && vel_cc > 1) { 
01A7:  DECFSZ 2C,W
01A8:  GOTO   1BC
01A9:  MOVLW  C7
01AA:  BSF    03.5
01AB:  MOVWF  06
01AC:  BCF    03.5
01AD:  BTFSC  06.0
01AE:  GOTO   1BC
01AF:  MOVF   26,W
01B0:  SUBLW  01
01B1:  BTFSC  03.0
01B2:  GOTO   1BC
....................          vel_cc--; 
01B3:  DECF   26,F
....................          while (!input(COLUN3)) { 
01B4:  MOVLW  C7
01B5:  BSF    03.5
01B6:  MOVWF  06
01B7:  BCF    03.5
01B8:  BTFSC  06.0
01B9:  GOTO   1BC
....................             girarMotores(); 
01BA:  CALL   033
01BB:  GOTO   1B4
....................          } 
....................       } 
....................        
....................       if (linha == 1 && !input(COLUN1) && vel_cc < 6) { 
01BC:  DECFSZ 2C,W
01BD:  GOTO   1D1
01BE:  MOVLW  C7
01BF:  BSF    03.5
01C0:  MOVWF  06
01C1:  BCF    03.5
01C2:  BTFSC  06.2
01C3:  GOTO   1D1
01C4:  MOVF   26,W
01C5:  SUBLW  05
01C6:  BTFSS  03.0
01C7:  GOTO   1D1
....................          vel_cc++; 
01C8:  INCF   26,F
....................          while (!input(COLUN1)) { 
01C9:  MOVLW  C7
01CA:  BSF    03.5
01CB:  MOVWF  06
01CC:  BCF    03.5
01CD:  BTFSC  06.2
01CE:  GOTO   1D1
....................             girarMotores(); 
01CF:  CALL   033
01D0:  GOTO   1C9
....................          } 
....................       } 
01D1:  INCF   2C,F
01D2:  GOTO   120
....................    } 
01D3:  BCF    0A.3
01D4:  BCF    0A.4
01D5:  GOTO   1F3 (RETURN)
.................... } 
....................  
.................... void girarMotores() { 
....................       if (vel_passo <= 5) 
*
0033:  MOVF   25,W
0034:  SUBLW  05
0035:  BTFSS  03.0
0036:  GOTO   044
....................          output_d(steps[pos%4]); 
0037:  MOVF   27,W
0038:  ANDLW  03
0039:  ADDLW  20
003A:  MOVWF  04
003B:  BCF    03.7
003C:  MOVF   00,W
003D:  MOVWF  37
003E:  BSF    03.5
003F:  CLRF   08
0040:  BCF    03.5
0041:  MOVF   37,W
0042:  MOVWF  08
0043:  GOTO   048
....................       else 
....................          output_d(0b0000000); 
0044:  BSF    03.5
0045:  CLRF   08
0046:  BCF    03.5
0047:  CLRF   08
....................        
....................       if (passo_direita) { 
0048:  MOVF   24,F
0049:  BTFSC  03.2
004A:  GOTO   04D
....................          pos--; 
004B:  DECF   27,F
....................       } else { 
004C:  GOTO   04E
....................          pos++; 
004D:  INCF   27,F
....................       } 
....................     
....................       // ESSE DELAY DEVE SER PREENCHIDO PELO PWM 
....................       uint16_t delay_us_passo = 1000 + (vel_passo*1000); 
....................        
....................       // LARGURA_PULSO = 100us 
....................       uint16_t delay_off_cc = 20*vel_cc; 
....................       uint16_t delay_on_cc =  100-delay_off_cc; 
004E:  CLRF   38
004F:  MOVF   25,W
0050:  MOVWF  37
0051:  MOVLW  03
0052:  MOVWF  3A
0053:  MOVLW  E8
0054:  MOVWF  39
*
0069:  MOVF   79,W
006A:  MOVWF  7A
006B:  MOVF   78,W
006C:  ADDLW  E8
006D:  MOVWF  2D
006E:  MOVF   7A,W
006F:  MOVWF  2E
0070:  MOVLW  03
0071:  BTFSC  03.0
0072:  MOVLW  04
0073:  ADDWF  2E,F
0074:  MOVLW  14
0075:  MOVWF  37
0076:  MOVF   26,W
0077:  MOVWF  38
*
009C:  CLRF   30
009D:  MOVF   78,W
009E:  MOVWF  2F
009F:  SUBLW  64
00A0:  MOVWF  31
00A1:  CLRF   32
00A2:  MOVF   30,W
00A3:  BTFSS  03.0
00A4:  INCFSZ 30,W
00A5:  SUBWF  32,F
....................  
....................       if (vel_cc == 6) { 
00A6:  MOVF   26,W
00A7:  SUBLW  06
00A8:  BTFSS  03.2
00A9:  GOTO   0AF
....................          delay_off_cc = 100; 
00AA:  CLRF   30
00AB:  MOVLW  64
00AC:  MOVWF  2F
....................          delay_on_cc =  0;    
00AD:  CLRF   32
00AE:  CLRF   31
....................       }   
....................  
....................       uint16_t qtd_pulsos = delay_us_passo/100; 
00AF:  MOVF   2E,W
00B0:  MOVWF  38
00B1:  MOVF   2D,W
00B2:  MOVWF  37
00B3:  CLRF   3A
00B4:  MOVLW  64
00B5:  MOVWF  39
*
00DA:  MOVF   79,W
00DB:  MOVWF  34
00DC:  MOVF   78,W
00DD:  MOVWF  33
....................  
....................       for (uint16_t i = 0; i < qtd_pulsos; i++) { 
00DE:  CLRF   36
00DF:  CLRF   35
00E0:  MOVF   36,W
00E1:  SUBWF  34,W
00E2:  BTFSS  03.0
00E3:  GOTO   116
00E4:  BTFSS  03.2
00E5:  GOTO   0EA
00E6:  MOVF   33,W
00E7:  SUBWF  35,W
00E8:  BTFSC  03.0
00E9:  GOTO   116
....................          output_low(PIN_E2); 
00EA:  MOVLW  EB
00EB:  BSF    03.5
00EC:  MOVWF  09
00ED:  BCF    03.5
00EE:  BCF    09.2
....................          delay_us(delay_off_cc); 
00EF:  MOVF   30,W
00F0:  MOVWF  37
00F1:  INCF   37,F
00F2:  DECF   37,F
00F3:  BTFSC  03.2
00F4:  GOTO   0F9
00F5:  MOVLW  FF
00F6:  MOVWF  38
00F7:  CALL   024
00F8:  GOTO   0F2
00F9:  MOVF   2F,W
00FA:  MOVWF  38
00FB:  CALL   024
....................          if (vel_cc < 6)  
00FC:  MOVF   26,W
00FD:  SUBLW  05
00FE:  BTFSS  03.0
00FF:  GOTO   105
....................             output_high(PIN_E2); 
0100:  MOVLW  EB
0101:  BSF    03.5
0102:  MOVWF  09
0103:  BCF    03.5
0104:  BSF    09.2
....................          delay_us(delay_on_cc); 
0105:  MOVF   32,W
0106:  MOVWF  37
0107:  INCF   37,F
0108:  DECF   37,F
0109:  BTFSC  03.2
010A:  GOTO   10F
010B:  MOVLW  FF
010C:  MOVWF  38
010D:  CALL   024
010E:  GOTO   108
010F:  MOVF   31,W
0110:  MOVWF  38
0111:  CALL   024
0112:  INCF   35,F
0113:  BTFSC  03.2
0114:  INCF   36,F
0115:  GOTO   0E0
....................       } 
0116:  RETURN
....................  
....................      // delay_us(1000 + (vel_passo*1000)); 
.................... } 
....................    
.................... void main() 
*
01D6:  MOVF   03,W
01D7:  ANDLW  1F
01D8:  MOVWF  03
01D9:  CLRF   24
01DA:  MOVLW  05
01DB:  MOVWF  25
01DC:  MOVWF  26
01DD:  CLRF   27
01DE:  BSF    03.5
01DF:  BSF    1F.0
01E0:  BSF    1F.1
01E1:  BSF    1F.2
01E2:  BCF    1F.3
01E3:  MOVLW  07
01E4:  MOVWF  1C
01E5:  BCF    03.7
.................... { 
....................    port_B_pullups(0b11000111);   
*
01EF:  BSF    03.5
01F0:  BCF    01.7
....................  
....................        
....................    while(TRUE) 
....................    { 
....................       scanPorts(); 
01F1:  BCF    03.5
01F2:  GOTO   117
....................       girarMotores(); 
01F3:  CALL   033
01F4:  GOTO   1F2
....................    } 
.................... } 
....................  
01F5:  SLEEP
....................  

Configuration Fuses:
   Word  1: 3F72   HS NOWDT PUT BROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
