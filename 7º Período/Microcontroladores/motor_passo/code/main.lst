CCS PCM C Compiler, Version 5.015, 5967               02-mai-18 10:52

               Filename:   D:\engenharia\7º Período\Microcontroladores\motor_passo\code\main.lst

               ROM used:   136 words (2%)
                           Largest free fragment is 2048
               RAM used:   18 (5%) at main() level
                           19 (5%) worst case
               Stack used: 2 locations (1 in main + 1 for interrupts)
               Stack size: 8

*
0000:  MOVLW  00
0001:  MOVWF  0A
0002:  GOTO   050
0003:  NOP
0004:  MOVWF  7F
0005:  SWAPF  03,W
0006:  CLRF   03
0007:  MOVWF  21
0008:  MOVF   0A,W
0009:  MOVWF  20
000A:  CLRF   0A
000B:  MOVF   04,W
000C:  MOVWF  22
000D:  MOVF   77,W
000E:  MOVWF  23
000F:  MOVF   78,W
0010:  MOVWF  24
0011:  MOVF   79,W
0012:  MOVWF  25
0013:  MOVF   7A,W
0014:  MOVWF  26
0015:  BCF    03.7
0016:  BCF    03.5
0017:  BTFSS  0B.4
0018:  GOTO   01B
0019:  BTFSC  0B.1
001A:  GOTO   02C
001B:  MOVF   22,W
001C:  MOVWF  04
001D:  MOVF   23,W
001E:  MOVWF  77
001F:  MOVF   24,W
0020:  MOVWF  78
0021:  MOVF   25,W
0022:  MOVWF  79
0023:  MOVF   26,W
0024:  MOVWF  7A
0025:  MOVF   20,W
0026:  MOVWF  0A
0027:  SWAPF  21,W
0028:  MOVWF  03
0029:  SWAPF  7F,F
002A:  SWAPF  7F,W
002B:  RETFIE
002C:  BCF    0A.3
002D:  BCF    0A.4
002E:  GOTO   02F
.................... #include <main.h> 
.................... #include <16F877A.h> 
.................... //////////// Standard Header file for the PIC16F877A device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F877A 
....................  
.................... #list 
....................  
.................... #device ADC=16 
....................  
.................... #FUSES NOWDT                    //No Watch Dog Timer 
.................... #FUSES NOLVP                    //No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
....................  
.................... #use delay(crystal=20000000) 
*
003A:  MOVLW  2D
003B:  MOVWF  04
003C:  BCF    03.7
003D:  MOVF   00,W
003E:  BTFSC  03.2
003F:  GOTO   04D
0040:  MOVLW  06
0041:  MOVWF  78
0042:  CLRF   77
0043:  DECFSZ 77,F
0044:  GOTO   043
0045:  DECFSZ 78,F
0046:  GOTO   042
0047:  MOVLW  7B
0048:  MOVWF  77
0049:  DECFSZ 77,F
004A:  GOTO   049
004B:  DECFSZ 00,F
004C:  GOTO   040
004D:  BCF    0A.3
004E:  BCF    0A.4
004F:  GOTO   07E (RETURN)
.................... #use FIXED_IO(D_outputs=PIN_D0,PIN_D1,PIN_D2,PIN_D3,PIN_D4, PIN_D5, PIN_D6,PIN_D7) 
....................  
....................  
....................  
.................... byte steps[] = { 
....................    0b00000001, 
....................    0b00000010, 
....................    0b01000100, 
....................    0b00001000 
.................... }; 
*
005C:  MOVLW  01
005D:  BCF    03.5
005E:  MOVWF  27
005F:  MOVLW  02
0060:  MOVWF  28
0061:  MOVLW  44
0062:  MOVWF  29
0063:  MOVLW  08
0064:  MOVWF  2A
....................  
.................... int direita = 0; 
....................  
.................... #INT_EXT 
.................... void  EXT_isr(void)  
.................... { 
....................    direita = !direita; 
*
002F:  MOVF   2B,F
0030:  BTFSC  03.2
0031:  GOTO   034
0032:  MOVLW  00
0033:  GOTO   035
0034:  MOVLW  01
0035:  MOVWF  2B
0036:  BCF    0B.1
0037:  BCF    0A.3
0038:  BCF    0A.4
0039:  GOTO   01B
.................... } 
....................  
.................... void main() 
*
0050:  MOVF   03,W
0051:  ANDLW  1F
0052:  MOVWF  03
0053:  CLRF   2B
0054:  BSF    03.5
0055:  BSF    1F.0
0056:  BSF    1F.1
0057:  BSF    1F.2
0058:  BCF    1F.3
0059:  MOVLW  07
005A:  MOVWF  1C
005B:  BCF    03.7
.................... { 
....................    port_B_pullups(0xFF); 
*
0065:  BSF    03.5
0066:  BCF    01.7
....................    enable_interrupts(INT_EXT); 
0067:  BCF    03.5
0068:  BSF    0B.4
....................    enable_interrupts(GLOBAL); 
0069:  MOVLW  C0
006A:  IORWF  0B,F
....................    ext_int_edge(L_TO_H); 
006B:  BSF    03.5
006C:  BSF    01.6
....................     
....................    int i = 0; 
006D:  BCF    03.5
006E:  CLRF   2C
....................        
....................    while(TRUE) 
....................    { 
....................       output_d(steps[i%4]); 
006F:  MOVF   2C,W
0070:  ANDLW  03
0071:  ADDLW  27
0072:  MOVWF  04
0073:  BCF    03.7
0074:  MOVF   00,W
0075:  MOVWF  2D
0076:  BSF    03.5
0077:  CLRF   08
0078:  BCF    03.5
0079:  MOVF   2D,W
007A:  MOVWF  08
....................       delay_ms(10); 
007B:  MOVLW  0A
007C:  MOVWF  2D
007D:  GOTO   03A
....................        
....................       
....................       if (direita) { 
007E:  MOVF   2B,F
007F:  BTFSC  03.2
0080:  GOTO   083
....................          i--; 
0081:  DECF   2C,F
....................       } else if (!direita) { 
0082:  GOTO   086
0083:  MOVF   2B,F
0084:  BTFSC  03.2
....................          i++; 
0085:  INCF   2C,F
....................       } 
0086:  GOTO   06F
....................    } 
....................  
.................... } 
0087:  SLEEP

Configuration Fuses:
   Word  1: 3F72   HS NOWDT PUT BROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
