CCS PCM C Compiler, Version 5.015, 5967               23-abr-18 20:03

               Filename:   D:\engenharia\7º Período\Microcontroladores\contador_projeto\code_CCS\main.lst

               ROM used:   155 words (8%)
                           Largest free fragment is 1893
               RAM used:   22 (10%) at main() level
                           26 (12%) worst case
               Stack used: 2 locations
               Stack size: 8

*
0000:  MOVLW  00
0001:  MOVWF  0A
0002:  GOTO   065
0003:  NOP
.................... #include <16F628A.h> 
.................... //////////// Standard Header file for the PIC16F628A device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F628A 
....................  
.................... #list 
....................  
.................... #include <stdint.h> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                   //// 
.................... ////                           stdint.h                                //// 
.................... ////                                                                   //// 
.................... //// Standard integer definitions.                                     //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2008 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _STDINT 
....................  
.................... #define _STDINT 
....................  
.................... //////////// exact width 
....................  
.................... typedef signed int8 int8_t; 
.................... typedef unsigned int8 uint8_t; 
.................... typedef signed int16 int16_t; 
.................... typedef unsigned int16 uint16_t; 
.................... typedef signed int32 int32_t; 
.................... typedef unsigned int32 uint32_t; 
....................  
.................... #if defined(__PCD__) 
.................... //typedef signed int24 int24_t; 
.................... //typedef unsigned int24 uint24_t; 
.................... typedef signed int64 int64_t; 
.................... typedef unsigned int64 uint64_t; 
.................... #endif 
....................  
.................... #define INT8_MAX  (128) 
.................... #define INT8_MIN  (-127) 
.................... #define UINT8_MAX (255) 
....................  
.................... #define INT16_MAX  (32767) 
.................... #define INT16_MIN  (-32768) 
.................... #define UINT16_MAX (65535) 
....................  
.................... #define INT32_MAX  (2147483647) 
.................... #define INT32_MIN  (-2147483648) 
.................... #define UINT32_MAX (4294967295) 
....................  
.................... #if defined(__PCD__) 
.................... //#define INT24_MAX  (8388607) 
.................... //#define INT24_MIN  (-8388608) 
.................... //#define UINT24_MAX (16777215) 
....................  
.................... #define INT64_MAX  (9223372036854775807) 
.................... #define INT64_MIN  (-9223372036854775808) 
.................... #define UINT64_MAX (18446744073709551615) 
.................... #endif 
....................  
.................... ///////// minimum width 
....................  
.................... typedef signed int8 int_least8_t; 
.................... typedef unsigned int8 uint_least8_t; 
.................... typedef signed int16 int_least16_t; 
.................... typedef unsigned int16 uint_least16_t; 
.................... typedef signed int32 int_least32_t; 
.................... typedef unsigned int32 uint_least32_t; 
....................  
.................... #if defined(__PCD__) 
.................... //typedef signed int24 int_least24_t; 
.................... //typedef unsigned int24 uint_least24_t; 
.................... typedef signed int64 int_least64_t; 
.................... typedef unsigned int64 uint_least64_t; 
.................... #endif 
....................  
.................... #define INT_LEAST8_MAX  (128) 
.................... #define INT_LEAST8_MIN  (-127) 
.................... #define UINT_LEAST8_MAX (255) 
....................  
.................... #define INT_LEAST16_MAX  (32767) 
.................... #define INT_LEAST16_MIN  (-32768) 
.................... #define UINT_LEAST16_MAX (65535) 
....................  
.................... #define INT_LEAST32_MAX  (2147483647) 
.................... #define INT_LEAST32_MIN  (-2147483648) 
.................... #define UINT_LEAST32_MAX (4294967295) 
....................  
.................... #if defined(__PCD__) 
.................... //#define INT_LEAST24_MAX  (8388607) 
.................... //#define INT_LEAST24_MIN  (-8388608) 
.................... //#define UINT_LEAST24_MAX (16777215) 
....................  
.................... #define INT_LEAST64_MAX  (9223372036854775807) 
.................... #define INT_LEAST64_MIN  (-9223372036854775808) 
.................... #define UINT_LEAST64_MAX (18446744073709551615) 
.................... #endif 
....................  
.................... ///////// fastest width 
....................  
.................... #if defined(__PCD__) 
.................... typedef signed int16 int_fast8_t; 
.................... typedef unsigned int16 uint_fast8_t; 
.................... #define INT_FAST8_MAX  (32767) 
.................... #define INT_FAST8_MIN  (-32768) 
.................... #define UINT_FAST8_MAX (65535) 
.................... typedef signed int16 int_fast16_t; 
.................... typedef unsigned int16 uint_fast16_t; 
.................... //typedef signed int24 int_fast24_t; 
.................... //typedef unsigned int24 uint_fast24_t; 
.................... typedef signed int64 int_fast64_t; 
.................... typedef unsigned int64 uint_fast64_t; 
.................... #else 
.................... typedef signed int8 int_fast8_t; 
.................... typedef unsigned int8 uint_fast8_t; 
.................... #define INT_FAST8_MAX  (128) 
.................... #define INT_FAST8_MIN  (-127) 
.................... #define UINT_FAST8_MAX (255) 
.................... typedef signed int16 int_fast16_t; 
.................... typedef unsigned int16 uint_fast16_t; 
.................... #endif 
....................  
.................... typedef signed int32 int_fast32_t; 
.................... typedef unsigned int32 uint_fast32_t; 
....................  
.................... #define INT_FAST16_MAX  (32767) 
.................... #define INT_FAST16_MIN  (-32768) 
.................... #define UINT_FAST16_MAX (65535) 
....................  
.................... #define INT_FAST32_MAX  (2147483647) 
.................... #define INT_FAST32_MIN  (-2147483648) 
.................... #define UINT_FAST32_MAX (4294967295) 
....................  
.................... #if defined(__PCD__) 
.................... //#define INT_FAST24_MAX  (8388607) 
.................... //#define INT_FAST24_MIN  (-8388608) 
.................... //#define UINT_FAST24_MAX (16777215) 
....................  
.................... #define INT_FAST64_MAX  (9223372036854775807) 
.................... #define INT_FAST64_MIN  (-9223372036854775808) 
.................... #define UINT_FAST64_MAX (18446744073709551615) 
.................... #endif 
....................  
.................... //////////// big enough to hold pointers (OPTIONAL) 
....................  
.................... /// TODO 
....................  
.................... /// intptr_t uintptr_t 
....................  
.................... /// INTPTRN_MIN INTPTRN_MAX UINTPTRN_MAX 
....................  
....................  
.................... /////////// greatest width (OPTIONAL) 
....................  
.................... /// TODO 
....................  
.................... /// intmax_t uintmax_t 
....................  
.................... /// INTMAXN_MIN INTMAXN_MAX UINTMAXN_MAX 
....................  
.................... /// INTMAX_C(value) UINTMAX_C(value) 
....................  
....................  
.................... #endif 
....................  
....................  
.................... #FUSES NOWDT                    //No Watch Dog Timer 
.................... #FUSES NOLVP                    //No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
....................  
.................... #use delay(crystal=20000000) 
....................  
.................... #define TCLK PIN_B0  
.................... #define TDIO PIN_B1 
....................  
.................... uint8_t m_brightness = 0; 
....................  
.................... uint8_t digitToSegment[] = { 
....................  // XGFEDCBA 
....................   0b00111111,    // 0 
....................   0b00000110,    // 1 
....................   0b01011011,    // 2 
....................   0b01001111,    // 3 
....................   0b01100110,    // 4 
....................   0b01101101,    // 5 
....................   0b01111101,    // 6 
....................   0b00000111,    // 7 
....................   0b01111111,    // 8 
....................   0b01101111,    // 9 
....................   0b01110111,    // A 
....................   0b01111100,    // b 
....................   0b00111001,    // C 
....................   0b01011110,    // d 
....................   0b01111001,    // E 
....................   0b01110001     // F 
.................... }; 
*
006C:  MOVLW  3F
006D:  MOVWF  21
006E:  MOVLW  06
006F:  MOVWF  22
0070:  MOVLW  5B
0071:  MOVWF  23
0072:  MOVLW  4F
0073:  MOVWF  24
0074:  MOVLW  66
0075:  MOVWF  25
0076:  MOVLW  6D
0077:  MOVWF  26
0078:  MOVLW  7D
0079:  MOVWF  27
007A:  MOVLW  07
007B:  MOVWF  28
007C:  MOVLW  7F
007D:  MOVWF  29
007E:  MOVLW  6F
007F:  MOVWF  2A
0080:  MOVLW  77
0081:  MOVWF  2B
0082:  MOVLW  7C
0083:  MOVWF  2C
0084:  MOVLW  39
0085:  MOVWF  2D
0086:  MOVLW  5E
0087:  MOVWF  2E
0088:  MOVLW  79
0089:  MOVWF  2F
008A:  MOVLW  71
008B:  MOVWF  30
....................  
.................... void setBrightness(uint8_t brightness, int on) { 
....................    m_brightness = (brightness & 0x7) | (on? 0x08 : 0x00); 
.................... } 
....................  
.................... void bitDelay() { 
....................    delay_us(100); 
*
0004:  MOVLW  A6
0005:  MOVWF  77
0006:  DECFSZ 77,F
0007:  GOTO   006
0008:  NOP
0009:  RETURN
.................... } 
....................  
.................... void start() { 
....................    output_low(TDIO); 
000A:  BSF    03.5
000B:  BCF    06.1
000C:  BCF    03.5
000D:  BCF    06.1
....................    bitDelay(); 
000E:  CALL   004
000F:  GOTO   095 (RETURN)
.................... } 
....................  
.................... void stop() { 
....................    output_low(TDIO); 
*
0055:  BSF    03.5
0056:  BCF    06.1
0057:  BCF    03.5
0058:  BCF    06.1
....................    bitDelay(); 
0059:  CALL   004
....................    output_high(TCLK); 
005A:  BSF    03.5
005B:  BCF    06.0
005C:  BCF    03.5
005D:  BSF    06.0
....................    bitDelay(); 
005E:  CALL   004
....................    output_high(TDIO); 
005F:  BSF    03.5
0060:  BCF    06.1
0061:  BCF    03.5
0062:  BSF    06.1
....................    bitDelay(); 
0063:  CALL   004
0064:  GOTO   099 (RETURN)
.................... } 
....................  
.................... int writeByte(uint8_t b) 
*
0010:  MOVF   31,W
0011:  MOVWF  32
.................... { 
....................   uint8_t data = b; 
....................  
....................   // 8 Data Bits 
....................   for(uint8_t i = 0; i < 8; i++) { 
0012:  CLRF   33
0013:  MOVF   33,W
0014:  SUBLW  07
0015:  BTFSS  03.0
0016:  GOTO   031
....................     // CLK low 
....................     output_low(TCLK); 
0017:  BSF    03.5
0018:  BCF    06.0
0019:  BCF    03.5
001A:  BCF    06.0
....................     bitDelay(); 
001B:  CALL   004
....................  
....................    // Set data bit 
....................     if (data & 0x01) { 
001C:  BTFSS  32.0
001D:  GOTO   023
....................       output_high(TDIO); 
001E:  BSF    03.5
001F:  BCF    06.1
0020:  BCF    03.5
0021:  BSF    06.1
....................     } 
0022:  GOTO   027
....................     else { 
....................       output_low(TDIO); 
0023:  BSF    03.5
0024:  BCF    06.1
0025:  BCF    03.5
0026:  BCF    06.1
....................     } 
....................  
....................     bitDelay(); 
0027:  CALL   004
....................  
....................    // CLK high 
....................     output_high(TCLK); 
0028:  BSF    03.5
0029:  BCF    06.0
002A:  BCF    03.5
002B:  BSF    06.0
....................     bitDelay(); 
002C:  CALL   004
....................     data = data >> 1; 
002D:  BCF    03.0
002E:  RRF    32,F
002F:  INCF   33,F
0030:  GOTO   013
....................    } 
....................     
....................      output_low(TCLK); 
0031:  BSF    03.5
0032:  BCF    06.0
0033:  BCF    03.5
0034:  BCF    06.0
....................   output_high(TDIO); 
0035:  BSF    03.5
0036:  BCF    06.1
0037:  BCF    03.5
0038:  BSF    06.1
....................   bitDelay(); 
0039:  CALL   004
....................  
....................   // CLK to high 
....................   output_high(TCLK); 
003A:  BSF    03.5
003B:  BCF    06.0
003C:  BCF    03.5
003D:  BSF    06.0
....................   bitDelay(); 
003E:  CALL   004
....................   uint8_t ack = input(TDIO); 
003F:  BSF    03.5
0040:  BSF    06.1
....................   if (ack == 0) 
*
0045:  MOVF   34,F
0046:  BTFSS  03.2
0047:  GOTO   04C
....................     output_low(TDIO); 
0048:  BSF    03.5
0049:  BCF    06.1
004A:  BCF    03.5
004B:  BCF    06.1
....................  
....................  
....................   bitDelay(); 
004C:  CALL   004
....................   output_high(TCLK); 
004D:  BSF    03.5
004E:  BCF    06.0
004F:  BCF    03.5
0050:  BSF    06.0
....................   bitDelay(); 
0051:  CALL   004
....................  
....................   return ack; 
0052:  MOVF   34,W
0053:  MOVWF  78
0054:  GOTO   098 (RETURN)
.................... } 
....................  
.................... void setSegments(uint8_t segments[], uint8_t length, uint8_t pos) { 
....................    start(); 
.................... } 
....................  
.................... void main() 
*
0065:  MOVF   03,W
0066:  ANDLW  1F
0067:  MOVWF  03
0068:  CLRF   20
0069:  MOVLW  07
006A:  MOVWF  1F
006B:  BCF    03.7
.................... { 
....................  
....................    output_low(TCLK); 
*
008C:  BSF    03.5
008D:  BCF    06.0
008E:  BCF    03.5
008F:  BCF    06.0
....................    output_low(TDIO); 
0090:  BSF    03.5
0091:  BCF    06.1
0092:  BCF    03.5
0093:  BCF    06.1
....................     
....................      start(); 
0094:  GOTO   00A
....................      writeByte(digitToSegment[3]); 
0095:  MOVF   24,W
0096:  MOVWF  31
0097:  GOTO   010
....................      stop(); 
0098:  GOTO   055
....................     
....................    while(TRUE) 
....................    { 
0099:  GOTO   099
....................       //TODO: User Code 
....................    } 
....................  
.................... } 
009A:  SLEEP

Configuration Fuses:
   Word  1: 3F62   NOWDT PUT HS MCLR BROWNOUT NOLVP NOCPD NOPROTECT
